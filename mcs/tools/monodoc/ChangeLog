2009-03-01  Jonathan Pryor  <jpryor@novell.com>

	* Monodoc/ecma-provider.cs: Viewing type members (plural, e.g. the
	  Fields sub-node) would result in a stack overflow within
	  Resources/mdoc-html-utils.xsl:GetInheritedMembers(), because the
	  document() XSLT function was being used to obtain the base type's
	  documentation.  It stack overflowed because the XmlUrlResolver was
	  being used, which when given e.g. file:///DocAttribute.xml, would
	  return file:///DocAttribute.xml (which makes sense), but it was
	  non-terminating.  (I find this troubling as it should have been
	  trying to resolve e.g. System.Attribute, not DocAttribute; it must
	  be some XmlTransform-fu that was substituting documents.)
	  The fix is for EcmaUncompiledHelpSource to provide an alternate
	  document XmlResolver, one which always returns null from
	  XmlResolver.ResolveUri(), thus preventing endless recursion.

2009-03-01  Jonathan Pryor  <jpryor@novell.com>

	* Mono.Documentation/XmlDocUtils.cs: It's possible for the `loader'
	  delegate to return `null' if no further base types are found, so
	  stop processing if we find a null base type.
	* Monodoc/provider.cs: 
	  - Make GetHelpStream() virtual so that EcmaUncompiledHelpSource can
	    override it, as the default zip-based behavior is inappropriate.
	  - Make GetHelpXmlWithChanges() virtual so that
	    EcmaUncompiledHelpSource can override it, as the default zip-based
	    behavior is inappropriate.
	  - When initializing UncompiledHelpSources, set the
	    HelpSource.RootTree property (avoids an NRE from
	    EcmaHelpSource.GetTextFromUrl() when it reads RootTree.HelpSources).
	* Monodoc/ecma-provider.cs: 
	  - Within the XmlDocUtils.AddExtensionMethods() call, don't always 
	    prefix the type with "T:", as sometimes the type will already start 
	    with "T:", which is the case with EcmaUncompiledHelpSource ids.  
	  - Add EcmaUncompiledHelpSource.GetHelpStream() and
	    EcmaUncompiledHelpSource.GetHelpXmlWithChanges(), which Do The
	    Right Thing for the file-based backend.

2009-03-01  Jonathan Pryor  <jpryor@novell.com>

	* Monodoc/ecma-provider.cs: For some reason,
	  EcmaHelpSource.GetNamespaceDocument() wasn't being used anymore,
	  which is what EcmaUncompiledHelpSource overrides to permit loading
	  of local files.  Result: an exception when trying to view namespaces
	  of local (non-assembled) directories.  Oops.  "Fixes" 443508.

2009-02-26  Jonathan Pryor  <jonpryor@vt.edu>

	* Monodoc/provider.cs: Revert; Don't check for Tree.Nodes == null, as it
	  happens in numerous places.  Instead, take a page out of the "I
	  never should have invented `null'" book, and ensure that Tree.Nodes
	  can never be null.  This fixes the "HelpSource has 0 items" issue
	  and several other related ones.

2009-02-26  Jonathan Pryor  <jonpryor@vt.edu>

	* Monodoc/provider.cs: It's possible for a HelpSource to have 0
	  elements (which can be done by e.g. running `mdoc assemble' on an 
	  empty directory), in which case HelpSource.Tree.Nodes will be null.
	  Make sure that we don't get a NullReferenceException.
	  Patch thanks to Theerud Lawtrakul.  Fixes #443699.

2009-02-25  Jonathan Pryor  <jonpryor@vt.edu>

	* Makefile: 
	  - s/TEST_FILES/MAN_TEST_FILES/g: $(TEST_FILES) is used by the normal
	    build process, so the local definition is lost (and thus ignored).
	    Result: Test/* isn't actually copied.  Oops.  Changing to
	    MAN_TEST_FILES allows things to be copied.
	  - Fix the filenames within $(MAN_TEST_FILES) so `make dist-local'
	    works without error.
	  - Fixes #479753.

2009-02-09  Jonathan Pryor  <jonpryor@vt.edu>

	* Makefile: Don't include mono-ecma-css.js as a resource.
	* Monodoc/ecma-provider.cs: Insert helper.js, not mono-ecma-css.js.
	* Monodoc/provider.cs: Surround the contents of `helper.js' with a
	  <script/> block so that valid HTMl is generated.
	* Resources/helper.js: Remove <script/> block, so that `helper.js' is an
	  actual JavaScript file, not an SGML file w/ JavaScript content.
	* Resources/mono-ecma-css.js: Remove; use Resources/helper.js instead.

2009-01-05  Jonathan Pryor  <jonpryor@vt.edu>

	* Makefile: Fix $(the_lib) dependencies so that monodoc.dll is rebuilt
	  when one of Resources/* is modified.
	* Resources/mdoc-html-utils.xsl: Rework the Requirements block so that
	  it doesn't require //AssemblyInfo or //AssemblyVersion.  This allows
	  `mdoc update -fno-assembly-versions ...`-produced XML to still
	  produce HTML with a Requirements section (skipping the Assembly
	  Versions block but generating the Namespace and Assembly blocks).
	  Change the behavior of //since generation so that instead of
	  printing out a note before the method summary, a Since block is added
	  to the Requirements section, and the Since block contains the
	  //since/@version text.  All this to make Mike Kestner happier. :-)

2008-10-29  Jonathan Pryor  <jonpryor@vt.edu>

	* Monodoc/xhtml-provider.cs: Use HelpSource.Message(), not 
	  Console.WriteLine().

2008-10-28  Jonathan Pryor  <jonpryor@vt.edu>

	* Monodoc/provider.cs: Add HelpSource.InlineCss and
	  HelpSource.InlineJavaScript virtual properties, so that the help
	  source can provide specific CSS and JavaScript to be included into
	  the generated HTML document.  This is used by the ASP.NET front-end,
	  as it needs to insert the CSS & JavaScript separately (as it also
	  inserts its own CSS & JavaScript).
	* Monodoc/ecma-provider.cs, Monodoc/ecmaspec-provider.cs,
	  Monodoc/error-provider.cs: Override InlineCss & InlineJavaScript, as
	  appropriate.

2008-10-24  Jonathan Pryor  <jonpryor@vt.edu>

	* Monodoc/addins-provider.cs, Monodoc/ecma-provider.cs,
	  Monodoc/ecmaspec-provider.cs, Monodoc/error-provider.cs,
	  Monodoc/man-provider.cs, Monodoc/monohb-provider.cs,
	  Monodoc/provider.cs: Remove Console.WriteLine() spew; helps cleanup
	  `make` output in mcs/docs (from `mdoc assemble`, which indirectly
	  invokes most of the *-provider files).  We solve this problem by
	  providing a TraceLevel-based message system, so that messages are
	  only generated if they are less than or equal to the requested
	  output level (thus skipping the more verbose "every file" messages
	  from ecma-provider.cs & error-provider.cs).
	* provider.cs: Change Node.CompareTo() to use a "natural sorting"
	  algorithm -- this allows the C# Language Specification nodes to
	  continue being displayed in the correct order.

2008-10-21  Jonathan Pryor  <jonpryor@vt.edu>

	* Monodoc/provider.cs: 
	  - Fix Node.Sort() so that it doesn't NRE if nodes == null.
	  - Fix Node.CompareTo() so that it can sort Nodes that haven't been
	    loaded yet.
	  - Add "libraries" as an alias for "root", so that .source files can
	    refer to the parent "libraries" (which would allow us to change
	    the location of "libraries" in the future, should we want to).
	  - If a /monodoc/source/@path refers to a nonexistant node, then
	    insert the contents under Various instead of ignoring it.
	  - Sort the top-level nodes.
	  - Sort the `parent` node after inserting children under it.  This
	    allows multiple different .source files to insert nodes under the
	    same parent node and still have the child nodes sorted as most
	    mortals would expect.
	  - Support a //node/@parent attribute, which allows for creating
	    nodes underneath the specified parent node.  This allows multiple
	    different .source files to contribute to the tree and depend upon
	    each other.  Thus, instead of having a single monodoc.xml file
	    that needs to know the entire tree in advance, the entire tree can
	    be spread across multiple .source files and filled at runtime.

2008-10-18  Jonathan Pryor  <jonpryor@vt.edu>

	* Makefile $(LIBRARY_PACKAGE): Set to `monodoc`, as we historically
	  have had a monodoc package (and thus should preserve it).

2008-10-17  Jonathan Pryor  <jonpryor@vt.edu>

	* Makefile: Distribute monodoc.dll.config.in.

2008-10-17  Jonathan Pryor  <jonpryor@vt.edu>

	* Makefile: Generate a monodoc.dll.config (installed by gacutil), so
	  that monodoc.dll can find the documentation sources.

2008-10-16  Jonathan Pryor  <jonpryor@vt.edu>

	* Mono.Documentation/ManifestResourceResolver.cs, 
	  Mono.Documentation/XmlDocUtils.cs: Make types public so that they
	  can be used from ../mdoc/mdoc.exe.

2008-10-16  Jonathan Pryor  <jonpryor@vt.edu>

	* Makefile: Update $(thisdir).

2008-10-16  Jonathan Pryor  <jonpryor@vt.edu>

	* Assmbly/AssemblyInfo.cs: Change location of mono.snk (since the 
	  monodoc directory was moved from mcs/class to mcs/tools).

2008-10-16  Jonathan Pryor  <jonpryor@vt.edu>

	* Makefile: Improve `make clean` support.

2008-10-16  Jonathan Pryor  <jonpryor@vt.edu>

	* Makefile: Add EXTRA_DISTFILES; monodoc.dll should depend upon
	  Makefile (in case the /resource: lines change); shorten the .gif
	  resource names.

2008-10-16  Jonathan Pryor  <jonpryor@vt.edu>

	* Test (svn:ignore): Ignore generated files.
	* Makefile: Add tests for man-provider.

2008-10-16  Jonathan Pryor  <jonpryor@vt.edu>

	* ChangeLog: Added/Started.
	* Makefile: Added; build monodoc.dll.

