<Type Name="IgnoreAttribute" FullName="NUnit.Framework.IgnoreAttribute">
  <TypeSignature Language="C#" Maintainer="auto" Value="public sealed class IgnoreAttribute : Attribute" />
  <AssemblyInfo>
    <AssemblyName>nunit.framework</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.1.4.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
    The ignore attribute is an attribute to not run a test or test fixture for a period of time.
    </summary>
    <remarks>
      <para>
    The person marks either a Test or a TestFixture with the Ignore Attribute. 
    The running program sees the attribute and does not run the test or tests. 
    The progress bar will turn yellow if a test is not run and the test will 
    be mentioned in the reports that it was not run.
    </para>
      <para>
    This feature should be used to temporarily not run a test or fixture. 
    This is a better mechanism than commenting out the test or renaming methods, 
    since the tests will be compiled with the rest of the code and 
    there is an indication at run time that a test is not being run. 
    This insures that tests will not be forgotten.
    </para>
      <example>
        <code lang="C#">
    using System;
    using NUnit.Framework;
  
    [TestFixture]
    [Ignore("Ignore a fixture")]
    public class SuccessTests
    {
            [Test]
	    [Ignore ("I am only finished with Foo not bar")]
	    public void Foobar()
	    {
	            /* ... */
	    }
    }
    </code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IgnoreAttribute (string reason);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reason">The reason</param>
        <summary>The reason for why the Fixture or Test should not be run</summary>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Reason">
      <MemberSignature Language="C#" Value="public string Reason { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The reason why a Fixture or Test should not be run</summary>
        <value>The reason</value>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>
