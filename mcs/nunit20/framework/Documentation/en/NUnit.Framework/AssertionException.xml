<Type Name="AssertionException" FullName="NUnit.Framework.AssertionException">
  <TypeSignature Language="C#" Maintainer="auto" Value="public class AssertionException : Exception" />
  <AssemblyInfo>
    <AssemblyName>nunit.framework</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
    <AssemblyVersion>2.1.4.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the &lt;link location="node:gtk-sharp/programming/threads"&gt;Gtk# Thread Programming&lt;/link&gt; for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Docs>
    <summary>
    The class AssertionException is thrown if an Assertion failed.
    </summary>
    <remarks>
      <para>
    You can use this Exception if you want to split up your Test method.
    </para>
      <example>
        <code lang="C#">
    using NUnit.Framework;

    [TestFixture]
    public class MyUnitTest : Assertion {

	string foo;

	[SetUp]
	public void GetReady()
	{
		foo = "Foobar";
	}

	[Test]
	public void Foobar()
	{
	        try {
		        Foo (foo);
		} catch (AssertionException ex) {
		        throw new AssertionException ("Foobar failed:  " + ex.Message, ex);
		}

		try {
			Bar (foo);
		} catch (AssertionException ex) {
			throw new AssertionException ("Foobar failed:  " + ex.Message, ex);
		}
	}

	private void Foo (string foobar)
	{
		Assert ("(1) Foo: ", foobar.StartsWith ("Foo"));
	}
	
	private void Bar (string foobar)
	{
		Assert ("(2) Bar: ", foobar.EndsWith ("bar"));
	}
    }
    </code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssertionException (string message);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message</param>
        <summary>Creates an AssertionException with a message</summary>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AssertionException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The serialization info.</param>
        <param name="context">The streaming context</param>
        <summary>Creates an AssertionException with customized serialization handling.</summary>
        <remarks>
        </remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssertionException (string message, Exception inner);" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="inner" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">The message</param>
        <param name="inner">An exception which should be wrapped</param>
        <summary>Creates an AssertionException with a message and wraps it around another exception</summary>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>
