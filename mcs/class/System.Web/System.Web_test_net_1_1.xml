<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Web_test_net_1_1</name>
    </assembly>
    <members>
        <member name="T:HtmlAgilityPack.Crc32">
            <summary>
            A utility class to compute CRC32.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.Crc32.CRC32String(System.String)">
            <summary>
            Compute a checksum for a given string.
            </summary>
            <param name="text">The string to compute the checksum for.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:HtmlAgilityPack.Crc32.CRC32Bytes(System.Byte[])">
            <summary>
            Compute a checksum for a given array of bytes.
            </summary>
            <param name="bytes">The array of bytes to compute the checksum for.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlAttribute">
            <summary>
            Represents an HTML attribute.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.Name">
            <summary>
            Gets the qualified name of the attribute.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.Value">
            <summary>
            Gets or sets the value of the attribute.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.Line">
            <summary>
            Gets the line number of this attribute in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.LinePosition">
            <summary>
            Gets the column number of this attribute in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.StreamPosition">
            <summary>
            Gets the stream position of this attribute in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.OwnerNode">
            <summary>
            Gets the HTML node to which this attribute belongs.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttribute.OwnerDocument">
            <summary>
            Gets the HTML document to which this attribute belongs.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttribute.Clone">
            <summary>
            Creates a duplicate of this attribute.
            </summary>
            <returns>The cloned attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttribute.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another attribute. Comparison is based on attributes' name.
            </summary>
            <param name="obj">An attribute to compare with this instance.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the names comparison.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlAttributeCollection">
            <summary>
            Represents a combined list and collection of HTML nodes.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlAttributeCollection.HtmlAttributeEnumerator">
            <summary>
            Represents an enumerator that can iterate through the list.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.HtmlAttributeEnumerator.IEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.HtmlAttributeEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.HtmlAttributeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.HtmlAttributeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.Item(System.String)">
            <summary>
            Gets a given attribute from the list using its name.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.Item(System.Int32)">
            <summary>
            Gets the attribute at the specified index.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlAttributeCollection.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Append(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Inserts the specified attribute as the last attribute in the collection.
            </summary>
            <param name="newAttribute">The attribute to insert. May not be null.</param>
            <returns>The appended attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Append(System.String)">
            <summary>
            Creates and inserts a new attribute as the last attribute in the collection.
            </summary>
            <param name="name">The name of the attribute to insert.</param>
            <returns>The appended attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Append(System.String,System.String)">
            <summary>
            Creates and inserts a new attribute as the last attribute in the collection.
            </summary>
            <param name="name">The name of the attribute to insert.</param>
            <param name="value">The value of the attribute to insert.</param>
            <returns>The appended attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Prepend(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Inserts the specified attribute as the first node in the collection.
            </summary>
            <param name="newAttribute">The attribute to insert. May not be null.</param>
            <returns>The prepended attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the attribute at the specified index.
            </summary>
            <param name="index">The index of the attribute to remove.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Remove(HtmlAgilityPack.HtmlAttribute)">
            <summary>
            Removes a given attribute from the list.
            </summary>
            <param name="attribute">The attribute to remove. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.Remove(System.String)">
            <summary>
            Removes an attribute from the list, using its name. If there are more than one attributes with this name, they will all be removed.
            </summary>
            <param name="name">The attribute's name. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.RemoveAll">
            <summary>
            Remove all attributes in the list.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlAttributeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the list.
            </summary>
            <returns>An IEnumerator for the entire list.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlParseErrorCode">
            <summary>
            Represents the type of parsing error.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.TagNotClosed">
            <summary>
            A tag was not closed.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.TagNotOpened">
            <summary>
            A tag was not opened.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.CharsetMismatch">
            <summary>
            There is a charset mismatch between stream and declared (META) encoding.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.EndTagNotRequired">
            <summary>
            An end tag was not required.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlParseErrorCode.EndTagInvalidHere">
            <summary>
            An end tag is invalid at this position.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlParseError">
            <summary>
            Represents a parsing error found during document parsing.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.Code">
            <summary>
            Gets the type of error.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.Line">
            <summary>
            Gets the line number of this error in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.LinePosition">
            <summary>
            Gets the column number of this error in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.StreamPosition">
            <summary>
            Gets the absolute stream position of this error in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.SourceText">
            <summary>
            Gets the the full text of the line containing the error.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlParseError.Reason">
            <summary>
            Gets a description for the error.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlDocument">
            <summary>
            Represents a complete HTML document.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.#ctor">
            <summary>
            Creates an instance of an HTML document.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionComputeChecksum">
            <summary>
            Defines if a checksum must be computed for the document while parsing. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionReadEncoding">
            <summary>
            Defines if declared encoding must be read from the document.
            Declared encoding is determined using the meta http-equiv="content-type" content="text/html;charset=XXXXX" html node.
            Default is true.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionCheckSyntax">
            <summary>
            Defines if non closed nodes will be checked at the end of parsing. Default is true.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionUseIdAttribute">
            <summary>
            Defines if the 'id' attribute must be specifically used. Default is true.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionWriteEmptyNodes">
            <summary>
            Defines if empty nodes must be written as closed during output. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputAsXml">
            <summary>
            Defines if output must conform to XML, instead of HTML.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputUpperCase">
            <summary>
            Defines if name must be output in uppercase. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionOutputOptimizeAttributeValues">
            <summary>
            Defines if attribute value output must be optimized (not bound with double quotes if it is possible). Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionAddDebuggingAttributes">
            <summary>
            Adds Debugging attributes to node. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionExtractErrorSourceText">
            <summary>
            Defines if source text must be extracted while parsing errors.
            If the document has a lot of errors, or cascading errors, parsing performance can be dramatically affected if set to true.
            Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionAutoCloseOnEnd">
            <summary>
            Defines if closing for non closed nodes must be done at the end or directly in the document.
            Setting this to true can actually change how browsers render the page. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionFixNestedTags">
            <summary>
            Defines if LI, TR, TH, TD tags must be partially fixed when nesting errors are detected. Default is false.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionExtractErrorSourceTextMaxLength">
            <summary>
            Defines the maximum length of source text or parse errors. Default is 100.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionDefaultStreamEncoding">
            <summary>
            Defines the default stream encoding to use. Default is System.Text.Encoding.Default.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlDocument.OptionStopperNodeName">
            <summary>
            Defines the name of a node that will throw the StopperNodeException when found as an end node. Default is null.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.Remainder">
            <summary>
            Gets the remaining text.
            Will always be null if OptionStopperNodeName is null.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.RemainderOffset">
            <summary>
            Gets the offset of Remainder in the original Html text.
            If OptionStopperNodeName is null, this will return the length of the original Html text.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.ParseErrors">
            <summary>
            Gets a list of parse errors found in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.StreamEncoding">
            <summary>
            Gets the document's stream encoding.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.DeclaredEncoding">
            <summary>
            Gets the document's declared encoding.
            Declared encoding is determined using the meta http-equiv="content-type" content="text/html;charset=XXXXX" html node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.Encoding">
            <summary>
            Gets the document's output encoding.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.DocumentNode">
            <summary>
            Gets the root node of the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlDocument.CheckSum">
            <summary>
            Gets the document CRC32 checksum if OptionComputeChecksum was set to true before parsing, 0 otherwise.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.HtmlEncode(System.String)">
            <summary>
            Applies HTML encoding to a specified string.
            </summary>
            <param name="html">The input string to encode. May not be null.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncoding(System.IO.Stream)">
            <summary>
            Detects the encoding of an HTML stream.
            </summary>
            <param name="stream">The input stream. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncoding(System.String)">
            <summary>
            Detects the encoding of an HTML file.
            </summary>
            <param name="path">Path for the file containing the HTML document to detect. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncodingHtml(System.String)">
            <summary>
            Detects the encoding of an HTML text.
            </summary>
            <param name="html">The input html text. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncoding(System.IO.TextReader)">
            <summary>
            Detects the encoding of an HTML text provided on a TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML. May not be null.</param>
            <returns>The detected encoding.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Boolean)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.LoadHtml(System.String)">
            <summary>
            Loads the HTML document from the specified string.
            </summary>
            <param name="html">String containing the HTML document to load. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncodingAndLoad(System.String)">
            <summary>
            Detects the encoding of an HTML document from a file first, and then loads the file.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.DetectEncodingAndLoad(System.String,System.Boolean)">
            <summary>
            Detects the encoding of an HTML document from a file first, and then loads the file.
            </summary>
            <param name="path">The complete file path to be read. May not be null.</param>
            <param name="detectEncoding">true to detect encoding, false otherwise.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Load(System.IO.TextReader)">
            <summary>
            Loads the HTML document from the specified TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.Stream)">
            <summary>
            Saves the HTML document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the HTML document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.String)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.String,System.Text.Encoding)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document. May not be null.</param>
            <param name="encoding">The character encoding to use. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.StreamWriter)">
            <summary>
            Saves the HTML document to the specified StreamWriter.
            </summary>
            <param name="writer">The StreamWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.IO.TextWriter)">
            <summary>
            Saves the HTML document to the specified TextWriter.
            </summary>
            <param name="writer">The TextWriter to which you want to save. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.Save(System.Xml.XmlWriter)">
            <summary>
            Saves the HTML document to the specified XmlWriter.
            </summary>
            <param name="writer">The XmlWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateNavigator">
            <summary>
            Creates a new XPathNavigator object for navigating this HTML document.
            </summary>
            <returns>An XPathNavigator object. The XPathNavigator is positioned on the root of the document.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.GetXmlName(System.String)">
            <summary>
            Gets a valid XML name.
            </summary>
            <param name="name">Any text.</param>
            <returns>A string that is a valid XML name.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.GetElementbyId(System.String)">
            <summary>
            Gets the HTML node with the specified 'id' attribute value.
            </summary>
            <param name="id">The attribute id to match. May not be null.</param>
            <returns>The HTML node with the matching id or null if not found.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateElement(System.String)">
            <summary>
            Creates an HTML element node with the specified name.
            </summary>
            <param name="name">The qualified name of the element. May not be null.</param>
            <returns>The new HTML node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateComment">
            <summary>
            Creates an HTML comment node.
            </summary>
            <returns>The new HTML comment node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateComment(System.String)">
            <summary>
            Creates an HTML comment node with the specified comment text.
            </summary>
            <param name="comment">The comment text. May not be null.</param>
            <returns>The new HTML comment node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateTextNode">
            <summary>
            Creates an HTML text node.
            </summary>
            <returns>The new HTML text node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateTextNode(System.String)">
            <summary>
            Creates an HTML text node with the specified text.
            </summary>
            <param name="text">The text of the node. May not be null.</param>
            <returns>The new HTML text node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateAttribute(System.String)">
            <summary>
            Creates an HTML attribute with the specified name.
            </summary>
            <param name="name">The name of the attribute. May not be null.</param>
            <returns>The new HTML attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an HTML attribute with the specified name.
            </summary>
            <param name="name">The name of the attribute. May not be null.</param>
            <param name="value">The value of the attribute.</param>
            <returns>The new HTML attribute.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlDocument.IsWhiteSpace(System.Int32)">
            <summary>
            Determines if the specified character is considered as a whitespace character.
            </summary>
            <param name="c">The character to check.</param>
            <returns>true if if the specified character is considered as a whitespace character.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlEntity">
            <summary>
            A utility class to replace special characters by entities and vice-versa.
            Follows HTML 4.0 specification found at http://www.w3.org/TR/html4/sgml/entities.html
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlEntity.EntityName">
            <summary>
            A collection of entities indexed by name.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlEntity.EntityValue">
            <summary>
            A collection of entities indexed by value.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(HtmlAgilityPack.HtmlNode)">
            <summary>
            Clone and entitize an HtmlNode. This will affect attribute values and nodes' text. It will also entitize all child nodes.
            </summary>
            <param name="node">The node to entitize.</param>
            <returns>An entitized cloned node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(System.String)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <returns>The result text.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(System.String,System.Boolean)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <param name="useNames">If set to false, the function will not use known entities name. Default is true.</param>
            <returns>The result text.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.Entitize(System.String,System.Boolean,System.Boolean)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <param name="useNames">If set to false, the function will not use known entities name. Default is true.</param>
            <param name="entitizeQuotAmpAndLtGt">If set to true, the [quote], [ampersand], [lower than] and [greather than] characters will be entitized.</param>
            <returns>The result text</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlEntity.DeEntitize(System.String)">
            <summary>
            Replace known entities by characters.
            </summary>
            <param name="text">The source text.</param>
            <returns>The result text.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlElementFlag">
            <summary>
            Flags that describe the behavior of an Element node.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.CData">
            <summary>
            The node is a CDATA node.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.Empty">
            <summary>
            The node is empty. META or IMG are example of such nodes.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.Closed">
            <summary>
            The node will automatically be closed during parsing.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlElementFlag.CanOverlap">
            <summary>
            The node can overlap.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeType">
            <summary>
            Represents the type of a node.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Document">
            <summary>
            The root of a document.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Element">
            <summary>
            An HTML element.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Comment">
            <summary>
            An HTML comment.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNodeType.Text">
            <summary>
            A text node is always the child of an element or a document node.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNode">
            <summary>
            Represents an HTML node.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.HtmlNodeTypeNameComment">
            <summary>
            Gets the name of a comment node. It is actually defined as '#comment'.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.HtmlNodeTypeNameDocument">
            <summary>
            Gets the name of the document node. It is actually defined as '#document'.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.HtmlNodeTypeNameText">
            <summary>
            Gets the name of a text node. It is actually defined as '#text'.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlNode.ElementsFlags">
            <summary>
            Gets a collection of flags that define specific behaviors for specific element nodes.
            The table contains a DictionaryEntry list with the lowercase tag name as the Key, and a combination of HtmlElementFlags as the Value.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Id">
            <summary>
            Gets or sets the value of the 'id' HTML attribute. The document must have been parsed using the OptionUseIdAttribute set to true.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Line">
            <summary>
            Gets the line number of this node in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.LinePosition">
            <summary>
            Gets the column number of this node in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.StreamPosition">
            <summary>
            Gets the stream position of this node in the document, relative to the start of the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Closed">
            <summary>
            Gets a value indicating if this node has been closed or not.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Name">
            <summary>
            Gets or sets this node's name.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.InnerText">
            <summary>
            Gets or Sets the text between the start and end tags of the object.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.NextSibling">
            <summary>
            Gets the HTML node immediately following this element.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.PreviousSibling">
            <summary>
            Gets the node immediately preceding this node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.FirstChild">
            <summary>
            Gets the first child of the node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.LastChild">
            <summary>
            Gets the last child of the node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.NodeType">
            <summary>
            Gets the type of this node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.ParentNode">
            <summary>
            Gets the parent of this node (for nodes that can have parents).
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.OwnerDocument">
            <summary>
            Gets the HtmlDocument to which this node belongs.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.ChildNodes">
            <summary>
            Gets all the children of the node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has any attributes.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.HasClosingAttributes">
            <summary>
            Gets a value indicating whether the current node has any attributes on the closing tag.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.HasChildNodes">
            <summary>
            Gets a value indicating whether this node has any child nodes.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.Attributes">
            <summary>
            Gets the collection of HTML attributes for this node. May not be null.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNode.ClosingAttributes">
            <summary>
            Gets the collection of HTML attributes for the closing tag. May not be null.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsClosedElement(System.String)">
            <summary>
            Determines if an element node is closed.
            </summary>
            <param name="name">The name of the element node to check. May not be null.</param>
            <returns>true if the name is the name of a closed element node, false otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CanOverlapElement(System.String)">
            <summary>
            Determines if an element node can be kept overlapped.
            </summary>
            <param name="name">The name of the element node to check. May not be null.</param>
            <returns>true if the name is the name of an element node that can be kept overlapped, false otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsOverlappedClosingElement(System.String)">
            <summary>
            Determines if a text corresponds to the closing tag of an node that can be kept overlapped.
            </summary>
            <param name="text">The text to check. May not be null.</param>
            <returns>true or false.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsCDataElement(System.String)">
            <summary>
            Determines if an element node is a CDATA element node.
            </summary>
            <param name="name">The name of the element node to check. May not be null.</param>
            <returns>true if the name is the name of a CDATA element node, false otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.IsEmptyElement(System.String)">
            <summary>
            Determines if an element node is defined as empty.
            </summary>
            <param name="name">The name of the element node to check. May not be null.</param>
            <returns>true if the name is the name of an empty element node, false otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CreateNode(System.String)">
            <summary>
            Creates an HTML node from a string representing literal HTML.
            </summary>
            <param name="html">The HTML text.</param>
            <returns>The newly created node instance.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CopyFrom(HtmlAgilityPack.HtmlNode)">
            <summary>
            Creates a duplicate of the node and the subtree under it.
            </summary>
            <param name="node">The node to duplicate. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CopyFrom(HtmlAgilityPack.HtmlNode,System.Boolean)">
            <summary>
            Creates a duplicate of the node.
            </summary>
            <param name="node">The node to duplicate. May not be null.</param>
            <param name="deep">true to recursively clone the subtree under the specified node, false to clone only the node itself.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CreateNavigator">
            <summary>
            Creates a new XPathNavigator object for navigating this HTML node.
            </summary>
            <returns>An XPathNavigator object. The XPathNavigator is positioned on the node from which the method was called. It is not positioned on the root of the document.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.SelectSingleNode(System.String)">
            <summary>
            Selects the first XmlNode that matches the XPath expression.
            </summary>
            <param name="xpath">The XPath expression. May not be null.</param>
            <returns>The first HtmlNode that matches the XPath query or a null reference if no matching node was found.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.SelectNodes(System.String)">
            <summary>
            Selects a list of nodes matching the XPath expression.
            </summary>
            <param name="xpath">The XPath expression.</param>
            <returns>An HtmlNodeCollection containing a collection of nodes matching the XPath query, or null if no node matched the XPath expression.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.Clone">
            <summary>
            Creates a duplicate of the node
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CloneNode(System.String)">
            <summary>
            Creates a duplicate of the node and changes its name at the same time.
            </summary>
            <param name="newName">The new name of the cloned node. May not be null.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CloneNode(System.String,System.Boolean)">
            <summary>
            Creates a duplicate of the node and changes its name at the same time.
            </summary>
            <param name="newName">The new name of the cloned node. May not be null.</param>
            <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.CloneNode(System.Boolean)">
            <summary>
            Creates a duplicate of the node.
            </summary>
            <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
            <returns>The cloned node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveAll">
            <summary>
            Removes all the children and/or attributes of the current node.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveAllChildren">
            <summary>
            Removes all the children of the current node.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveChild(HtmlAgilityPack.HtmlNode)">
            <summary>
            Removes the specified child node.
            </summary>
            <param name="oldChild">The node being removed. May not be null.</param>
            <returns>The node removed.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.RemoveChild(HtmlAgilityPack.HtmlNode,System.Boolean)">
            <summary>
            Removes the specified child node.
            </summary>
            <param name="oldChild">The node being removed. May not be null.</param>
            <param name="keepGrandChildren">true to keep grand children of the node, false otherwise.</param>
            <returns>The node removed.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.ReplaceChild(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode)">
            <summary>
            Replaces the child node oldChild with newChild node.
            </summary>
            <param name="newChild">The new node to put in the child list.</param>
            <param name="oldChild">The node being replaced in the list.</param>
            <returns>The node replaced.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.InsertBefore(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode)">
            <summary>
            Inserts the specified node immediately before the specified reference node.
            </summary>
            <param name="newChild">The node to insert. May not be null.</param>
            <param name="refChild">The node that is the reference node. The newChild is placed before this node.</param>
            <returns>The node being inserted.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.InsertAfter(HtmlAgilityPack.HtmlNode,HtmlAgilityPack.HtmlNode)">
            <summary>
            Inserts the specified node immediately after the specified reference node.
            </summary>
            <param name="newChild">The node to insert. May not be null.</param>
            <param name="refChild">The node that is the reference node. The newNode is placed after the refNode.</param>
            <returns>The node being inserted.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.PrependChild(HtmlAgilityPack.HtmlNode)">
            <summary>
            Adds the specified node to the beginning of the list of children of this node.
            </summary>
            <param name="newChild">The node to add. May not be null.</param>
            <returns>The node added.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.PrependChildren(HtmlAgilityPack.HtmlNodeCollection)">
            <summary>
            Adds the specified node list to the beginning of the list of children of this node.
            </summary>
            <param name="newChildren">The node list to add. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.AppendChild(HtmlAgilityPack.HtmlNode)">
            <summary>
            Adds the specified node to the end of the list of children of this node.
            </summary>
            <param name="newChild">The node to add. May not be null.</param>
            <returns>The node added.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.AppendChildren(HtmlAgilityPack.HtmlNodeCollection)">
            <summary>
            Adds the specified node to the end of the list of children of this node.
            </summary>
            <param name="newChildren">The node list to add. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.GetAttributeValue(System.String,System.String)">
            <summary>
            Helper method to get the value of an attribute of this node. If the attribute is not found, the default value will be returned.
            </summary>
            <param name="name">The name of the attribute to get. May not be null.</param>
            <param name="def">The default value to return if not found.</param>
            <returns>The value of the attribute if found, the default value if not found.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Helper method to get the value of an attribute of this node. If the attribute is not found, the default value will be returned.
            </summary>
            <param name="name">The name of the attribute to get. May not be null.</param>
            <param name="def">The default value to return if not found.</param>
            <returns>The value of the attribute if found, the default value if not found.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.GetAttributeValue(System.String,System.Boolean)">
            <summary>
            Helper method to get the value of an attribute of this node. If the attribute is not found, the default value will be returned.
            </summary>
            <param name="name">The name of the attribute to get. May not be null.</param>
            <param name="def">The default value to return if not found.</param>
            <returns>The value of the attribute if found, the default value if not found.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.SetAttributeValue(System.String,System.String)">
            <summary>
            Helper method to set the value of an attribute of this node. If the attribute is not found, it will be created automatically.
            </summary>
            <param name="name">The name of the attribute to set. May not be null.</param>
            <param name="value">The value for the attribute.</param>
            <returns>The corresponding attribute instance.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteTo(System.IO.TextWriter)">
            <summary>
            Saves the current node to the specified TextWriter.
            </summary>
            <param name="outText">The TextWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Saves the current node to the specified XmlWriter.
            </summary>
            <param name="writer">The XmlWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteContentTo(System.IO.TextWriter)">
            <summary>
            Saves all the children of the node to the specified TextWriter.
            </summary>
            <param name="outText">The TextWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteTo">
            <summary>
            Saves the current node to a string.
            </summary>
            <returns>The saved string.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNode.WriteContentTo">
            <summary>
            Saves all the children of the node to a string.
            </summary>
            <returns>The saved string.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeCollection">
            <summary>
            Represents a combined list and collection of HTML nodes.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeCollection.HtmlNodeEnumerator">
            <summary>
            Represents an enumerator that can iterate through the list.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.HtmlNodeEnumerator.IEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.HtmlNodeEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.HtmlNodeEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.HtmlNodeEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element, false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Item(System.Int32)">
            <summary>
            Gets the node at the specified index.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Item(HtmlAgilityPack.HtmlNode)">
            <summary>
            Gets a given node from the list.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeCollection.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the list.
            </summary>
            <returns>An IEnumerator for the entire list.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlTextNode">
            <summary>
            Represents an HTML text node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlTextNode.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object. In the case of a text node, it is equals to OuterHtml.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlTextNode.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlTextNode.Text">
            <summary>
            Gets or Sets the text of the node.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlCommentNode">
            <summary>
            Represents an HTML comment.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlCommentNode.InnerHtml">
            <summary>
            Gets or Sets the HTML between the start and end tags of the object. In the case of a text node, it is equals to OuterHtml.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlCommentNode.OuterHtml">
            <summary>
            Gets or Sets the object and its content in HTML.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlCommentNode.Comment">
            <summary>
            Gets or Sets the comment text of the node.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlNodeNavigator">
            <summary>
            Represents an HTML navigator on an HTML document seen as a data store.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.LocalName">
            <summary>
            Gets the name of the current HTML node without the namespace prefix.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace Specification) of the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.Name">
            <summary>
            Gets the qualified name of the current node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.Prefix">
            <summary>
            Gets the prefix associated with the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.BaseURI">
            <summary>
            Gets the base URI for the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.XmlLang">
            <summary>
            Gets the xml:lang scope for the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.NameTable">
            <summary>
            Gets the XmlNameTable associated with this implementation.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has child nodes.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.HasChildren">
            <summary>
            Gets a value indicating whether the current node has child nodes.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.CurrentNode">
            <summary>
            Gets the current HTML node.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlNodeNavigator.CurrentDocument">
            <summary>
            Gets the current HTML document.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNext">
            <summary>
            Moves to the next sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the next sibling node, false if there are no more siblings or if the navigator is currently positioned on an attribute node. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToPrevious">
            <summary>
            Moves to the previous sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the previous sibling node, false if there is no previous sibling or if the navigator is currently positioned on an attribute node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirst">
            <summary>
            Moves to the first sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the first sibling node, false if there is no first sibling or if the navigator is currently positioned on an attribute node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstChild">
            <summary>
            Moves to the first child of the current node.
            </summary>
            <returns>true if there is a first child node, otherwise false.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToParent">
            <summary>
            Moves to the parent of the current node.
            </summary>
            <returns>true if there is a parent node, otherwise false.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToRoot">
            <summary>
            Moves to the root node to which the current node belongs.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves to the same position as the specified HtmlNavigator.
            </summary>
            <param name="other">The HtmlNavigator positioned on the node that you want to move to.</param>
            <returns>true if successful, otherwise false. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToId(System.String)">
            <summary>
            Moves to the node that has an attribute of type ID whose value matches the specified string.
            </summary>
            <param name="id">A string representing the ID value of the node to which you want to move. This argument does not need to be atomized.</param>
            <returns>true if the move was successful, otherwise false. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Determines whether the current HtmlNavigator is at the same position as the specified HtmlNavigator.
            </summary>
            <param name="other">The HtmlNavigator that you want to compare against.</param>
            <returns>true if the two navigators have the same position, otherwise, false.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.Clone">
            <summary>
            Creates a new HtmlNavigator positioned at the same node as this HtmlNavigator.
            </summary>
            <returns>A new HtmlNavigator object positioned at the same node as the original HtmlNavigator.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the HTML attribute with the specified LocalName and NamespaceURI.
            </summary>
            <param name="localName">The local name of the HTML attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute. Unsupported with the HtmlNavigator implementation.</param>
            <returns>The value of the specified HTML attribute. String.Empty or null if a matching attribute is not found or if the navigator is not positioned on an element node.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the HTML attribute with matching LocalName and NamespaceURI.
            </summary>
            <param name="localName">The local name of the HTML attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute. Unsupported with the HtmlNavigator implementation.</param>
            <returns>true if the HTML attribute is found, otherwise, false. If false, the position of the navigator does not change.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstAttribute">
            <summary>
            Moves to the first HTML attribute.
            </summary>
            <returns>true if the navigator is successful moving to the first HTML attribute, otherwise, false.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNextAttribute">
            <summary>
            Moves to the next HTML attribute.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.GetNamespace(System.String)">
            <summary>
            Returns the value of the namespace node corresponding to the specified local name.
            Always returns string.Empty for the HtmlNavigator implementation.
            </summary>
            <param name="name">The local name of the namespace node.</param>
            <returns>Always returns string.Empty for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNamespace(System.String)">
            <summary>
            Moves the XPathNavigator to the namespace node with the specified local name.
            Always returns false for the HtmlNavigator implementation.
            </summary>
            <param name="name">The local name of the namespace node.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the first namespace node of the current element.
            Always returns false for the HtmlNavigator implementation.
            </summary>
            <param name="scope">An XPathNamespaceScope value describing the namespace scope.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlNodeNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the next namespace node.
            Always returns falsefor the HtmlNavigator implementation.
            </summary>
            <param name="scope">An XPathNamespaceScope value describing the namespace scope.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlWeb">
            <summary>
            A utility class to get HTML document from HTTP.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.#ctor">
            <summary>
            Creates an instance of an HtmlWeb class.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlWeb.PreRequestHandler">
            <summary>
            Represents the method that will handle the PreRequest event.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlWeb.PostResponseHandler">
            <summary>
            Represents the method that will handle the PostResponse event.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.HtmlWeb.PreHandleDocumentHandler">
            <summary>
            Represents the method that will handle the PreHandleDocument event.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlWeb.PreRequest">
            <summary>
            Occurs before an HTTP request is executed.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlWeb.PostResponse">
            <summary>
            Occurs after an HTTP request has been executed.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.HtmlWeb.PreHandleDocument">
            <summary>
            Occurs before an HTML document is handled.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.FromCache">
            <summary>
            Gets a value indicating if the last document was retrieved from the cache.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.ResponseUri">
            <summary>
            Gets the URI of the Internet resource that actually responded to the request.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.CacheOnly">
            <summary>
            Gets or Sets a value indicating whether to get document only from the cache.
            If this is set to true and document is not found in the cache, nothing will be loaded.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.UseCookies">
            <summary>
            Gets or Sets a value indicating if cookies will be stored.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.RequestDuration">
            <summary>
            Gets the last request duration in milliseconds.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.AutoDetectEncoding">
            <summary>
            Gets or Sets a value indicating if document encoding must be automatically detected.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.StatusCode">
            <summary>
            Gets the last request status.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.StreamBufferSize">
            <summary>
            Gets or Sets the size of the buffer used for memory operations.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.CachePath">
            <summary>
            Gets or Sets the cache path. If null, no caching mechanism will be used.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.HtmlWeb.UsingCache">
            <summary>
            Gets or Sets a value indicating whether the caching mechanisms should be used or not.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Get(System.String,System.String)">
            <summary>
            Gets an HTML document from an Internet resource and saves it to the specified file.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="path">The location of the file where you want to save the document.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Get(System.String,System.String,System.String)">
            <summary>
            Gets an HTML document from an Internet resource and saves it to the specified file.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="path">The location of the file where you want to save the document.</param>
            <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Load(System.String)">
            <summary>
            Gets an HTML document from an Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.Load(System.String,System.String)">
            <summary>
            Loads an HTML document from an Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND.</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.GetCachePath(System.Uri)">
            <summary>
            Gets the cache file path for a specified url.
            </summary>
            <param name="uri">The url fo which to retrieve the cache path. May not be null.</param>
            <returns>The cache file path.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.GetExtensionForContentType(System.String,System.String)">
            <summary>
            Gets the path extension for a given MIME content type.
            </summary>
            <param name="contentType">The input MIME content type.</param>
            <param name="def">The default path extension to return if any error occurs.</param>
            <returns>The MIME content type's path extension.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.GetContentTypeForExtension(System.String,System.String)">
            <summary>
            Gets the MIME content type for a given path extension.
            </summary>
            <param name="extension">The input path extension.</param>
            <param name="def">The default content type to return if any error occurs.</param>
            <returns>The path extention's MIME content type.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.LoadHtmlAsXml(System.String,System.Xml.XmlTextWriter)">
            <summary>
            Loads an HTML document from an Internet resource and saves it to the specified XmlTextWriter.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="writer">The XmlTextWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.LoadHtmlAsXml(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlTextWriter)">
            <summary>
            Loads an HTML document from an Internet resource and saves it to the specified XmlTextWriter, after an XSLT transformation.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An XsltArgumentList containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="writer">The XmlTextWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.LoadHtmlAsXml(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Loads an HTML document from an Internet resource and saves it to the specified XmlTextWriter, after an XSLT transformation.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp". May not be null.</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An XsltArgumentList containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="writer">The XmlTextWriter to which you want to save.</param>
            <param name="xmlPath">A file path where the temporary XML before transformation will be saved. Mostly used for debugging purposes.</param>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.CreateInstance(System.String,System.Type)">
            <summary>
            Creates an instance of the given type from the specified Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="type">The requested type.</param>
            <returns>An newly created instance.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.CreateInstance(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Type)">
            <summary>
            Creates an instance of the given type from the specified Internet resource.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An XsltArgumentList containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="type">The requested type.</param>
            <returns>An newly created instance.</returns>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWeb.CreateInstance(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Type,System.String)">
            <summary>
            Creates an instance of the given type from the specified Internet resource.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An XsltArgumentList containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="type">The requested type.</param>
            <param name="xmlPath">A file path where the temporary XML before transformation will be saved. Mostly used for debugging purposes.</param>
            <returns>An newly created instance.</returns>
        </member>
        <member name="T:HtmlAgilityPack.HtmlWebException">
            <summary>
            Represents an exception thrown by the HtmlWeb utility class.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.HtmlWebException.#ctor(System.String)">
            <summary>
            Creates an instance of the HtmlWebException.
            </summary>
            <param name="message">The exception's message.</param>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentFragmentType">
            <summary>
            Represents the type of fragement in a mixed code document.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocumentFragmentType.Code">
            <summary>
            The fragment contains code.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocumentFragmentType.Text">
            <summary>
            The fragment contains text.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentCodeFragment">
            <summary>
            Represents a fragment of code in a mixed code document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentCodeFragment.Code">
            <summary>
            Gets the fragment code text.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentTextFragment">
            <summary>
            Represents a fragment of text in a mixed code document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentTextFragment.Text">
            <summary>
            Gets the fragment text.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentFragment">
            <summary>
            Represents a base class for fragments in a mixed code document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragment.FragmentType">
            <summary>
            Gets the type of fragment.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragment.StreamPosition">
            <summary>
            Gets the fragment position in the document's stream.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragment.Line">
            <summary>
            Gets the line number of the fragment.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragment.LinePosition">
            <summary>
            Gets the line position (column) of the fragment.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragment.FragmentText">
            <summary>
            Gets the fragement text.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentFragmentList">
            <summary>
            Represents a list of mixed code fragments.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator">
            <summary>
            Represents a fragment enumerator.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.IEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.MixedCodeDocumentFragmentEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragmentList.Item(System.Int32)">
            <summary>
            Gets a fragment from the list using its index.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocumentFragmentList.Count">
            <summary>
            Gets the number of fragments contained in the list.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.IEnumerable.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the fragment list.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.Append(HtmlAgilityPack.MixedCodeDocumentFragment)">
            <summary>
            Appends a fragment to the list of fragments.
            </summary>
            <param name="newFragment">The fragment to append. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.Prepend(HtmlAgilityPack.MixedCodeDocumentFragment)">
            <summary>
            Prepends a fragment to the list of fragments.
            </summary>
            <param name="newFragment">The fragment to append. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.Remove(HtmlAgilityPack.MixedCodeDocumentFragment)">
            <summary>
            Remove a fragment from the list of fragments. If this fragment was not in the list, an exception will be raised.
            </summary>
            <param name="fragment">The fragment to remove. May not be null.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.RemoveAt(System.Int32)">
            <summary>
            Remove a fragment from the list of fragments, using its index in the list.
            </summary>
            <param name="index">The index of the fragment to remove.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.RemoveAll">
            <summary>
            Remove all fragments from the list.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocumentFragmentList.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the fragment list.
            </summary>
        </member>
        <member name="T:HtmlAgilityPack.MixedCodeDocument">
            <summary>
            Represents a document with mixed code and text. ASP, ASPX, JSP, are good example of such documents.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.#ctor">
            <summary>
            Creates a mixed code document instance.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocument.TokenCodeStart">
            <summary>
            Gets or sets the token representing code start.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocument.TokenCodeEnd">
            <summary>
            Gets or sets the token representing code end.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocument.TokenDirective">
            <summary>
            Gets or sets the token representing code directive.
            </summary>
        </member>
        <member name="F:HtmlAgilityPack.MixedCodeDocument.TokenResponseWrite">
            <summary>
            Gets or sets the token representing response write directive.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocument.StreamEncoding">
            <summary>
            Gets the encoding of the stream used to read the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocument.CodeFragments">
            <summary>
            Gets the list of code fragments in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocument.TextFragments">
            <summary>
            Gets the list of text fragments in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocument.Fragments">
            <summary>
            Gets the list of all fragments in the document.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.MixedCodeDocument.Code">
            <summary>
            Gets the code represented by the mixed code document seen as a template.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.String)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Boolean)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.LoadHtml(System.String)">
            <summary>
            Loads a mixed document from a text
            </summary>
            <param name="html">The text to load.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Load(System.IO.TextReader)">
            <summary>
            Loads the mixed code document from the specified TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.IO.Stream)">
            <summary>
            Saves the mixed document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the mixed document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.String)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.String,System.Text.Encoding)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.IO.StreamWriter)">
            <summary>
            Saves the mixed document to the specified StreamWriter.
            </summary>
            <param name="writer">The StreamWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.Save(System.IO.TextWriter)">
            <summary>
            Saves the mixed document to the specified TextWriter.
            </summary>
            <param name="writer">The TextWriter to which you want to save.</param>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.CreateTextFragment">
            <summary>
            Create a text fragment instances.
            </summary>
            <returns>The newly created text fragment instance.</returns>
        </member>
        <member name="M:HtmlAgilityPack.MixedCodeDocument.CreateCodeFragment">
            <summary>
            Create a code fragment instances.
            </summary>
            <returns>The newly created code fragment instance.</returns>
        </member>
        <member name="T:HtmlAgilityPack.ParseReader">
            <summary>
            Represents a rewindable buffered TextReader specifically well suited for parsing operations.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes an instance of the ParserReader class, based on an existing TextReader instance.
            </summary>
            <param name="baseReader">The TextReader to base parsing on. Must not be null.</param>
        </member>
        <member name="P:HtmlAgilityPack.ParseReader.Item(System.Int32)">
            <summary>
            Gets the character at the specified index or -1 if no more characters are available.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.ParseReader.Length">
            <summary>
            Gets the length in bytes of the stream.
            Always throws a NotSupportedException for the ParserReader class.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.ParseReader.Position">
            <summary>
            Gets or sets the position within the stream.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.ParseReader.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            Always returns true for the ParserReader class.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.ParseReader.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            Always returns true for the ParserReader class.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.ParseReader.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            Always returns false for the ParserReader class.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.ParseReader.BaseReaderPosition">
            <summary>
            Gets the position within the underlying stream.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.ParseReader.MaxReaderPosition">
            <summary>
            Gets the maximum position within the underlying stream.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.ParseReader.BufferedTextLength">
            <summary>
            Gets the length of the currently buffered text.
            </summary>
        </member>
        <member name="P:HtmlAgilityPack.ParseReader.BufferedText">
            <summary>
            Gets the currently buffered text.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.CheckLength(System.Int32)">
            <summary>
            Checks the length of the underlying stream.
            </summary>
            <param name="length">The required length.</param>
            <returns>true if the underlying stream's length is greater than the required length, false otherwise.</returns>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            Always throws a NotSupportedException for the ParserReader class.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.CloseBaseReader">
            <summary>
            Closes the current underlying stream.
            </summary>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.Peek">
            <summary>
            Returns the next available character but does not consume it.
            </summary>
            <returns>The next character to be read, or -1 if no more characters are available.</returns>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.Read">
            <summary>
            Reads the next character and advances the character position by one character.
            </summary>
            <returns>The next character represented as an Int32, or -1 if no more characters are available.</returns>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.Seek(System.Int32)">
            <summary>
            Move the position starting from the current position.
            </summary>
            <param name="count">A character offset relative to the current position.</param>
            <returns>The new position.</returns>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.ReadString(System.Int32)">
            <summary>
            Reads a string from the current position.
            </summary>
            <param name="count">The number of characters to read.</param>
            <returns>The read string or null, if an error occurred.</returns>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.Read(System.Int32)">
            <summary>
            Reads a string, represented as an array of System.Int32, from the current position.
            </summary>
            <param name="count">The number of characters to read.</param>
            <returns>The read string or null, if an error occurred.</returns>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count- 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            Always throws a NotSupportedException for the ParserReader class.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:HtmlAgilityPack.ParseReader.GetBufferedString(System.Int32,System.Int32)">
            <summary>
            Extracts a string out of the buffered text.
            </summary>
            <param name="offset">The zero-based byte offset in buffered text at which to begin extracting.</param>
            <param name="length">The maximum number of bytes to be read from the buffered text.</param>
            <returns>
            </returns>
        </member>
        <member name="T:MonoTests.stand_alone.WebHarness.XmlComparer">
            <summary>
            Summary description for XmlComparer.
            </summary>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.BaseControl">
            <summary>
            This is a container for a control used by <see cref="T:MonoTests.SystemWeb.Framework.FormRequest" />.
            </summary>
            <seealso cref="T:MonoTests.SystemWeb.Framework.FormRequest" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseControl.#ctor">
            <summary>
            Default constructor; does nothing.
            </summary>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseControl.#ctor(System.String,System.String)">
            <summary>
            Creates a <see cref="T:MonoTests.SystemWeb.Framework.BaseControl" /> instance, initializing the
            <see cref="P:MonoTests.SystemWeb.Framework.BaseControl.Name" /> and <see cref="P:MonoTests.SystemWeb.Framework.BaseControl.Value" /> properties with
            the given values.
            </summary>
            <param name="name">The name of the control.</param>
            <param name="value">The value of the control.</param>
            <seealso cref="P:MonoTests.SystemWeb.Framework.BaseControl.Name" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.BaseControl.Value" />
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.BaseControl.Name">
            <summary>
            The name of the control.
            </summary>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.BaseControl.Value">
            <summary>
            The string value of the control.
            </summary>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseControl.IsSuccessful">
            <summary>
            Returns <c>true</c>, if the control is valid for submission. Override this method
            to implement validation of different controls. See
            <see href="http://www.w3.org/TR/REC-html40/interact/forms.html#successful-controls" /></summary>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.BaseControlCollection">
            <summary>
            The collection of <see cref="T:MonoTests.SystemWeb.Framework.BaseControl" /> instances used by <see cref="T:MonoTests.SystemWeb.Framework.FormRequest" />.
            </summary>
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseControl" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.FormRequest" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseControlCollection.#ctor">
            <summary>
            The default constructor; does nothing.
            </summary>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseControlCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            The constructor is necessary because this class overrides
            <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" />,
            which makes a custom serialization.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Serialization context.</param>
            <seealso cref="T:System.Collections.Specialized.NameObjectCollectionBase" />
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.BaseControlCollection.Item(System.String)">
            <summary>
            Sets or gets the control with the given name. The <c>get</c> ??? is guaranteed
            to return a non-null value.
            </summary>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseControlCollection.Remove(System.String)">
            <summary>
            Removes a control from the collection.
            </summary>
            <param name="name">The name of the control to remove.</param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseControlCollection.Add(System.String)">
            <summary>
            Adds a new control to the collection. If there is a control with
            the same name, it will be kept intact.
            </summary>
            <param name="name">The name of a control to be added.</param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseControlCollection.Add(MonoTests.SystemWeb.Framework.BaseControl)">
            <summary>
            Adds a new control to the collection. If there is control with
            the same name, it will be overwritten.
            </summary>
            <param name="control">New control.</param>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.BaseInvoker">
            <summary>
            Base class for invokers, which can be used on its own when no user callbacks need
            to be executed in the Web context. When a user callback needs to be called, use
            one of the <see cref="T:MonoTests.SystemWeb.Framework.BaseInvoker" /> subclasses (the most common is
            <see cref="T:MonoTests.SystemWeb.Framework.PageInvoker" />).
            </summary>
            <seealso cref="T:MonoTests.SystemWeb.Framework.PageInvoker" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseInvoker.DoInvoke(System.Object[])">
            <summary>
            This method is called to activate the invoker. When <see cref="T:MonoTests.SystemWeb.Framework.BaseInvoker" />
            is overriden, the subclasses should call the base class <c>DoInvoke</c>, if they want
            to use the default <see cref="M:MonoTests.SystemWeb.Framework.BaseInvoker.CheckInvokeDone" /> implementation.
            </summary>
            <param name="parameters">
            </param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseInvoker.GetDefaultUrl">
            <summary>
            This method returns the default URL specific to the invoker type. By default,
            there is no default URL.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseInvoker.CheckInvokeDone">
            <summary>
            Checks whether <c>DoInvoke</c> was called or not. If subclasses do not override this
            method, they have to call <see cref="M:MonoTests.SystemWeb.Framework.BaseInvoker.DoInvoke(System.Object[])" /> to register the
            invocation.
            </summary>
            <seealso cref="M:MonoTests.SystemWeb.Framework.BaseInvoker.DoInvoke(System.Object[])" />
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.BaseRequest">
            <summary>
            The base request container. Provides access to <see cref="P:MonoTests.SystemWeb.Framework.BaseRequest.Url" /> and
            <see cref="P:MonoTests.SystemWeb.Framework.BaseRequest.UserAgent" /> and creates <see cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" />
            in web appdomain.
            </summary>
            <seealso cref="P:MonoTests.SystemWeb.Framework.BaseRequest.Url" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.BaseRequest.UserAgent" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseRequest.#ctor">
            <summary>
            The default constructor. Does nothing.
            </summary>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseRequest.#ctor(System.String)">
            <summary>
            Creates instance of <see cref="T:MonoTests.SystemWeb.Framework.BaseRequest" /> and initializes
            <see cref="P:MonoTests.SystemWeb.Framework.BaseRequest.Url" /> property.
            </summary>
            <param name="url">The initial value of <see cref="P:MonoTests.SystemWeb.Framework.BaseRequest.Url" /> property.</param>
            <seealso cref="P:MonoTests.SystemWeb.Framework.BaseRequest.Url" />
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.BaseRequest.Url">
            <summary>
            The URL to make the request to.
            </summary>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.BaseRequest.UserAgent">
            <summary>
            The user-agent HTTP header string. By default is initialized by the same
            string as sent by Internet Explorer 6.
            </summary>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.BaseRequest.QueryString">
            <summary>
            The query string, passed to the constructor of <see cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" />.
            </summary>
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseRequest.CreateWorkerRequest">
            <summary>
            Create a new <see cref="T:System.Web.HttpWorkerRequest" /> from data contained in this
            <see cref="T:MonoTests.SystemWeb.Framework.BaseRequest" />. The returned object must also implement
            <see cref="T:MonoTests.SystemWeb.Framework.IForeignData" /> interface. <see cref="T:MonoTests.SystemWeb.Framework.BaseRequest" /> stores
            the TextWriter in foreign data of the worker request, to use it later in
            <see cref="M:MonoTests.SystemWeb.Framework.BaseRequest.ExtractResponse(System.Net.WebResponse)" />.
            </summary>
            <returns>A new <see cref="T:System.Web.HttpWorkerRequest" />.</returns>
            <seealso cref="T:System.Web.HttpWorkerRequest" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.IForeignData" />
            <seealso cref="T:System.Web.HttpWorkerRequest" />
            <seealso cref="M:MonoTests.SystemWeb.Framework.BaseRequest.ExtractResponse(System.Net.WebResponse)" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseRequest.CreateWebRequest(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Create a new <see cref="T:System.Net.WebRequest" />.
            </summary>
            <remarks>
            This method is used when the test web application is not hosted, but deployed. Possible
            uses: test web application is remoted, Grasshopper setup with web application running
            on Tomcat.
            </remarks>
            <param name="baseUri">URI to send request to.</param>
            <param name="headers">Collection of headers to add to request</param>
            <returns>A new <see cref="T:System.Net.HttpWebRequest" />.</returns>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseRequest.CreateHttpWebRequest(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Create a new <see cref="T:System.Web.HttpWorkerRequest" /> by using <see cref="M:System.Net.WebRequest.Create(System.String)" />.
            </summary>
            <param name="baseUri">URI to pass to <see cref="M:System.Net.WebRequest.Create(System.String)" /></param>
            <param name="headers">Headers to add to the created <see cref="T:System.Web.HttpWorkerRequest" /></param>
            <returns>A new <see cref="T:System.Web.HttpWorkerRequest" /></returns>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseRequest.CreateBaseWorkerRequest(System.IO.TextWriter)">
            <summary>
            This function is used by subclasses of <see cref="T:MonoTests.SystemWeb.Framework.BaseRequest" /> to create a
            subclass of <see cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" />.
            </summary>
            <param name="wr">TextWriter that must be passed to <see cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" />.</param>
            <returns>A new instance of <see cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" />, created
            with <see cref="P:MonoTests.SystemWeb.Framework.BaseRequest.Url" />, <see cref="P:MonoTests.SystemWeb.Framework.BaseRequest.QueryString" /> and <see cref="P:MonoTests.SystemWeb.Framework.BaseRequest.UserAgent" />.</returns>
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.BaseRequest.UserAgent" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.BaseRequest.Url" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseRequest.ExtractResponse(System.Web.HttpWorkerRequest)">
            <summary>
            Extracts the response from the completed <see cref="T:System.Web.HttpWorkerRequest" />
            and returns a new <see cref="T:MonoTests.SystemWeb.Framework.Response" /> instance. This method works with HttpWorkerRequest
            created with <see cref="M:MonoTests.SystemWeb.Framework.BaseRequest.CreateWorkerRequest" />.
            </summary>
            <param name="request">this must be the same request that was returned by
            CreateWorkerRequest</param>
            <returns>New <see cref="T:MonoTests.SystemWeb.Framework.Response" /> instance, containing the results of the
            request.</returns>
            <seealso cref="T:System.Web.HttpWorkerRequest" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.Response" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseRequest.ExtractResponse(System.Net.WebResponse)">
            <summary>
            This method is used to extract response of the request created by <see cref="M:MonoTests.SystemWeb.Framework.BaseRequest.CreateWebRequest(System.Uri,System.Collections.Specialized.NameValueCollection)" />.
            </summary>
            <remarks>
            </remarks>
            <param name="response">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest">
            <summary>
            Overrides <see cref="T:System.Web.Hosting.SimpleWorkerRequest" /> to provide
            access to user-agent header and to implement <see cref="T:MonoTests.SystemWeb.Framework.IForeignData" />
            interface.
            </summary>
            <seealso cref="T:System.Web.Hosting.SimpleWorkerRequest" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.IForeignData" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseWorkerRequest.#ctor(System.String,System.String,System.IO.TextWriter,System.String)">
            <summary>
            Create worker request with given page, query, writer and user agent.
            </summary>
            <param name="page">The URL of the page.</param>
            <param name="query">The request query string.</param>
            <param name="writer">The <see cref="T:System.IO.TextWriter" /> used to write HTTP response.</param>
            <param name="userAgent">The value of the user-agent HTTP header.</param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseWorkerRequest.GetKnownRequestHeader(System.Int32)">
            <summary>
            Overriden to return the custom user-agent.
            </summary>
            <param name="index">Header index, as defined by <see cref="T:System.Web.HttpWorkerRequest" /></param>
            <returns>
            </returns>
            <seealso cref="T:System.Web.HttpWorkerRequest" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.BaseWorkerRequest.SendStatus(System.Int32,System.String)">
            <summary>
            Overriden to store the status code.
            </summary>
            <param name="statusCode">
            </param>
            <param name="statusDescription">
            </param>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.FormRequest">
            <summary>
            This class is used for HTML form postback request.
            </summary>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.FormRequest.#ctor(MonoTests.SystemWeb.Framework.Response,System.String)">
            <summary>
            Create <see cref="T:MonoTests.SystemWeb.Framework.FormRequest" /> instance from the given
            <paramref name="response">response</paramref> extracting
            form attributes and hidden controls from the form element
            with given id.
            </summary>
            <param name="response">The response to extract values from.</param>
            <param name="formId">The id of the form to use.</param>
            <remarks>Currently, the <paramref name="formId" /> is ignored, and the
            first form is used.</remarks>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.FormRequest.Controls">
            <summary>
            Get or set the collection of controls, posted back to the server.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:MonoTests.SystemWeb.Framework.FormRequest.IsPost-->
        <member name="P:MonoTests.SystemWeb.Framework.FormRequest.ContentType">
            <summary>
            Returns the HTTP content-type header value. Currently hard-coded to return
            <c>application/x-www-form-urlencoded</c>.
            </summary>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.FormRequest.EntityBody">
            <summary>
            Returns the HTTP <c>entity-body</c> header value.
            </summary>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.FormRequest.QueryString">
            <summary>
            Get the URL encoded query string in format <c><![CDATA[name1=value1&name2=value2]]></c>, etc.
            </summary>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.IForeignData">
            <summary>
            This interface is used to add foreign data to the implementing class
            instances (similar to Python common practice) or AOP field injection.
            </summary>
            <remarks>
            This is achieved by convention that every class <b>using</b> this interface
            passes it's own type to the indexer property.
            </remarks>
            <example>
            class IForeignDataUsingClass
            {
            	public string getData (IForeignData fd)
            	{
            		return fd[this.GetType ()] as string;
            	}
            }
            </example>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.IForeignData.Item(System.Type)">
            <summary>
            Gets or sets the foreign data hold by the given instance.
            </summary>
            <param name="type">Type that wishes to inject a field.</param>
            <returns>
            </returns>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.HandlerInvoker">
            <summary>
            This invoker calls a single user delegate of type <see cref="T:MonoTests.SystemWeb.Framework.HandlerDelegate" />.
            It's intended to be used with provided <see cref="T:System.Web.IHttpHandler" /> implementation
            to run callbacks in the web context <b>without</b> creating <see cref="T:System.Web.UI.Page" />.
            This invoker is not widely used in favor of <see cref="T:MonoTests.SystemWeb.Framework.PageInvoker" /></summary>
            <seealso cref="T:MonoTests.SystemWeb.Framework.HandlerDelegate" />
            <seealso cref="T:System.Web.IHttpHandler" />
            <seealso cref="T:System.Web.UI.Page" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.PageInvoker" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.HandlerInvoker.#ctor(MonoTests.SystemWeb.Framework.HandlerDelegate)">
            <summary>
            Create a new invoker with the given callback
            </summary>
            <param name="callback">The callback that is invoked during <System.Web.IHttpHandler.ProcessRequest />.</param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.HandlerInvoker.DoInvoke(System.Object[])">
            <summary>
            Overriden to call the user provided delegate.
            </summary>
            <param name="parameters">Ignored.</param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.HandlerInvoker.GetDefaultUrl">
            <summary>
            Returns the URL which maps to our <see cref="T:System.Web.IHttpHandler" />
            implementation
            </summary>
            <returns>The default URL.</returns>
            <seealso cref="T:System.Web.IHttpHandler" />
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.PageDelegates">
            <summary>
            This structure holds callbacks for all page events, callback for
            <see cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" /> and user data
            passed to these callbacks.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.PageDelegates.CommitTransaction">
            <summary>
                <see cref="E:System.Web.UI.TemplateControl.CommitTransaction" /> event callback.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.PageDelegates.AbortTransaction">
            <summary>
                <see cref="E:System.Web.UI.TemplateControl.AbortTransaction" /> event callback.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.PageDelegates.Error">
            <summary>
                <see cref="E:System.Web.UI.TemplateControl.Error" /> event callback.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.PageDelegates.Disposed">
            <summary>
                <see cref="E:System.Web.UI.Control.Disposed" /> event callback.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.PageDelegates.DataBinding">
            <summary>
                <see cref="E:System.Web.UI.Control.DataBinding" /> event callback.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.PageDelegates.Init">
            <summary>
                <see cref="E:System.Web.UI.Control.Init" /> event callback.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.PageDelegates.Load">
            <summary>
                <see cref="E:System.Web.UI.Control.Load" /> event callback.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.PageDelegates.PreRender">
            <summary>
                <see cref="E:System.Web.UI.Control.PreRender" /> event callback.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.PageDelegates.Unload">
            <summary>
                <see cref="E:System.Web.UI.Control.Unload" /> event callback.
            </summary>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.PageInvoker">
            <summary>
            This class is used to pass and invoke the user callbacks to all possible
            <see cref="T:System.Web.UI.Page" /> lifecycle events. For the most
            used events <see cref="E:System.Web.UI.Control.Init" /> and
            <see cref="E:System.Web.UI.Control.Load" /> there are convenience
            creation methods <see cref="M:MonoTests.SystemWeb.Framework.PageInvoker.CreateOnInit(MonoTests.SystemWeb.Framework.PageDelegate)" /> and <see cref="M:MonoTests.SystemWeb.Framework.PageInvoker.CreateOnLoad(MonoTests.SystemWeb.Framework.PageDelegate)" />.
            In .NET 2.0 there same applies to PreInit event.
            </summary>
            <seealso cref="E:System.Web.UI.Control.Init" />
            <seealso cref="E:System.Web.UI.Control.Load" />
            <seealso cref="M:MonoTests.SystemWeb.Framework.PageInvoker.CreateOnInit(MonoTests.SystemWeb.Framework.PageDelegate)" />
            <seealso cref="M:MonoTests.SystemWeb.Framework.PageInvoker.CreateOnLoad(MonoTests.SystemWeb.Framework.PageDelegate)" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.#ctor(MonoTests.SystemWeb.Framework.PageDelegates)">
            <summary>
            The constructor method.
            </summary>
            <param name="delegates">Value which initializes <see cref="P:MonoTests.SystemWeb.Framework.PageInvoker.Delegates" /> property.</param>
            <seealso cref="P:MonoTests.SystemWeb.Framework.PageInvoker.Delegates" />
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.PageInvoker.Delegates">
            <summary>
            Set or get the <see cref="T:MonoTests.SystemWeb.Framework.PageDelegates" /> collection.
            </summary>
            <seealso cref="T:MonoTests.SystemWeb.Framework.PageDelegates" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.CreateOnInit(MonoTests.SystemWeb.Framework.PageDelegate)">
            <summary>
            Create a new <see cref="T:MonoTests.SystemWeb.Framework.PageInvoker" /> which Delegates contain the
            given callback for Init event.
            </summary>
            <param name="callback">The user callback.</param>
            <returns>A new <see cref="T:MonoTests.SystemWeb.Framework.PageInvoker" /> instance.</returns>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.CreateOnLoad(MonoTests.SystemWeb.Framework.PageDelegate)">
            <summary>
            Create a new <see cref="T:MonoTests.SystemWeb.Framework.PageInvoker" /> which Delegates contain the
            given callback for Load event.
            </summary>
            <param name="callback">The user callback.</param>
            <returns>A new <see cref="T:MonoTests.SystemWeb.Framework.PageInvoker" /> instance.</returns>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.DoInvoke(System.Object[])">
            <summary>
            Add the callbacks contained in <see cref="P:MonoTests.SystemWeb.Framework.PageInvoker.Delegates" /> to
            the given page's events.
            </summary>
            <param name="parameters">Must contain one parameter of type
            <see cref="T:System.Web.UI.Page" /></param>
            <seealso cref="P:MonoTests.SystemWeb.Framework.PageInvoker.Delegates" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.OnCommitTransaction(System.Object,System.EventArgs)">
            <summary>
            This must be made private as soon as Mono allows using private methods for delegates
            </summary>
            <param name="sender">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.OnAbortTransaction(System.Object,System.EventArgs)">
            <summary>
            This must be made private as soon as Mono allows using private methods for delegates
            </summary>
            <param name="sender">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.OnError(System.Object,System.EventArgs)">
            <summary>
            This must be made private as soon as Mono allows using private methods for delegates
            </summary>
            <param name="sender">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.OnDisposed(System.Object,System.EventArgs)">
            <summary>
            This must be made private as soon as Mono allows using private methods for delegates
            </summary>
            <param name="sender">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.OnDataBinding(System.Object,System.EventArgs)">
            <summary>
            This must be made private as soon as Mono allows using private methods for delegates
            </summary>
            <param name="sender">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.OnInit(System.Object,System.EventArgs)">
            <summary>
            This must be made private as soon as Mono allows using private methods for delegates
            </summary>
            <param name="sender">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.OnLoad(System.Object,System.EventArgs)">
            <summary>
            This must be made private as soon as Mono allows using private methods for delegates
            </summary>
            <param name="sender">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.OnPreRender(System.Object,System.EventArgs)">
            <summary>
            This must be made private as soon as Mono allows using private methods for delegates
            </summary>
            <param name="sender">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.OnUnload(System.Object,System.EventArgs)">
            <summary>
            This must be made private as soon as Mono allows using private methods for delegates
            </summary>
            <param name="sender">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PageInvoker.GetDefaultUrl">
            <summary>
            Returns the URL of a generic empty page.
            </summary>
            <returns>The default URL.</returns>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.PostableRequest">
            <summary>
            Adds the postback functionality to <see cref="T:MonoTests.SystemWeb.Framework.BaseRequest" />.
            Provides pretty low-level interface. Consider using <seealso cref="T:MonoTests.SystemWeb.Framework.FormRequest" />
            in user code.
            </summary>
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseRequest" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PostableRequest.#ctor">
            <summary>
            Default constructor. Does nothing.
            </summary>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PostableRequest.#ctor(System.String)">
            <summary>
            Create an instance of <see cref="T:MonoTests.SystemWeb.Framework.PostableRequest" />,
            calling the base constructor with given <paramref name="url" />.
            </summary>
            <param name="url">The URL for the request.</param>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.PostableRequest.IsPost">
            <summary>
            Get or set the HTTP method. If <see cref="P:MonoTests.SystemWeb.Framework.PostableRequest.IsPost" /> is true,
            the request will be done with <c>POST</c> HTTP method, otherwise with <c>GET</c>.
            </summary>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.PostableRequest.EntityBody">
            <summary>
            Get or set the HTTP <c>entity-body</c>.
            </summary>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.PostableRequest.ContentType">
            <summary>
            Get or set the HTTP <c>content-type</c>.
            </summary>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PostableRequest.CreateBaseWorkerRequest(System.IO.TextWriter)">
            <summary>
            Create a <see cref="T:MonoTests.SystemWeb.Framework.PostableWorkerRequest" /> if <see cref="P:MonoTests.SystemWeb.Framework.PostableRequest.IsPost" />
            is true or <see cref="P:MonoTests.SystemWeb.Framework.PostableRequest.EntityBody" /> is not null. Otherwise, call the
            base method.
            </summary>
            <param name="wr">The text writer that is passed to the
            <see cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" /> constructor.</param>
            <returns>A new <see cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" /> instance.</returns>
            <seealso cref="T:MonoTests.SystemWeb.Framework.PostableWorkerRequest" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.PostableRequest.IsPost" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.PostableRequest.EntityBody" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseWorkerRequest" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.PostableRequest.CreateWebRequest(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Override the base <see cref="M:MonoTests.SystemWeb.Framework.PostableRequest.CreateWebRequest(System.Uri,System.Collections.Specialized.NameValueCollection)" /> and add POST method functionality
            when necessary.
            </summary>
            <param name="baseUri">URI to send request to.</param>
            <param name="headers">Headers added to the request.</param>
            <returns>A new <see cref="T:System.Net.WebRequest" /></returns>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.Response">
            <summary>
            Contains the HTTP response data after executing
            <see cref="M:MonoTests.SystemWeb.Framework.WebTest.Run" /></summary>
            <seealso cref="M:MonoTests.SystemWeb.Framework.WebTest.Run" />
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.Response.Body">
            <summary>
            Get the response body.
            </summary>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.Response.StatusCode">
            <summary>
            Get the HTTP status code of the response
            </summary>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.Response.StatusDescription">
            <summary>
            Get the HTTP status description of the response
            </summary>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.StandardUrl">
            <summary>
            Contains constants
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.StandardUrl.FAKE_PAGE">
            <summary>
            Fake page URL which maps to the custom invoker. Used together with
            <see cref="T:MonoTests.SystemWeb.Framework.HandlerInvoker" /></summary>
            <seealso cref="T:MonoTests.SystemWeb.Framework.HandlerInvoker" />
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.StandardUrl.EMPTY_PAGE">
            <summary>
            An empty page for generic usage.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.StandardUrl.PAGE_WITH_MASTER">
            <summary>
            An empty page, referencing a master page.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.StandardUrl.PAGE_WITH_DERIVED_MASTER">
            <summary>
            An empty page, referencing a master page which references another master page.
            </summary>
        </member>
        <member name="F:MonoTests.SystemWeb.Framework.StandardUrl.PAGE_WITH_MASTER_INVALID_PLACE_HOLDER">
            <summary>
            A page referencing a master page which tries to use a non-existing content place
            holder
            </summary>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.WebTest">
            <summary>
            The most important class from user perspective. See <see cref="P:MonoTests.SystemWeb.Framework.WebTest.Request" />,
            <see cref="T:MonoTests.SystemWeb.Framework.Response" />, <see cref="P:MonoTests.SystemWeb.Framework.WebTest.Invoker" />, <see cref="M:MonoTests.SystemWeb.Framework.WebTest.Run" /> for
            more information.
            </summary>
            <seealso cref="P:MonoTests.SystemWeb.Framework.WebTest.Request" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.Response" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.WebTest.Invoker" />
            <seealso cref="M:MonoTests.SystemWeb.Framework.WebTest.Run" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.WebTest.#ctor">
            <summary>
            Default constructor. Initializes <see cref="P:MonoTests.SystemWeb.Framework.WebTest.Invoker" /> with a new
            <see cref="T:MonoTests.SystemWeb.Framework.BaseInvoker" /> and <see cref="P:MonoTests.SystemWeb.Framework.WebTest.Request" /> with an empty
            <see cref="T:MonoTests.SystemWeb.Framework.BaseRequest" />.
            </summary>
            <seealso cref="P:MonoTests.SystemWeb.Framework.WebTest.Invoker" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseInvoker" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.WebTest.Request" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseRequest" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.WebTest.#ctor(System.String)">
            <summary>
            Same as <see cref="T:MonoTests.SystemWeb.Framework.WebTest" />, and set <see cref="P:MonoTests.SystemWeb.Framework.BaseRequest.Url" /> to
            the specified Url.
            </summary>
            <param name="url">The URL used for the next <see cref="M:MonoTests.SystemWeb.Framework.WebTest.Run" /></param>
            <seealso cref="P:MonoTests.SystemWeb.Framework.BaseRequest.Url" />
            <seealso cref="M:MonoTests.SystemWeb.Framework.WebTest.Run" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.WebTest.#ctor(MonoTests.SystemWeb.Framework.BaseInvoker)">
            <summary>
            Create a new instance, initializing <see cref="P:MonoTests.SystemWeb.Framework.WebTest.Invoker" /> with the given
            value, and the <see cref="P:MonoTests.SystemWeb.Framework.WebTest.Request" /> with <see cref="T:MonoTests.SystemWeb.Framework.BaseRequest" />.
            </summary>
            <param name="invoker">The invoker used for this test.</param>
            <seealso cref="P:MonoTests.SystemWeb.Framework.WebTest.Invoker" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.WebTest.Request" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseRequest" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.WebTest.#ctor(MonoTests.SystemWeb.Framework.BaseRequest)">
            <summary>
            Create a new instance, initializing <see cref="P:MonoTests.SystemWeb.Framework.WebTest.Request" /> with the given
            value, and the <see cref="P:MonoTests.SystemWeb.Framework.WebTest.Invoker" /> with <see cref="T:MonoTests.SystemWeb.Framework.BaseInvoker" />.
            </summary>
            <param name="request">The request used for this test.</param>
            <seealso cref="P:MonoTests.SystemWeb.Framework.WebTest.Request" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.WebTest.Invoker" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseInvoker" />
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.WebTest.DomainUpException">
            <summary>
            Thrown when trying to copy a resource after appdomain was created. Please call
            WebTest.Unload before copying resource.
            </summary>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.WebTest.UserData">
            <summary>
            Any user-defined data. Must be serializable to pass between appdomains.
            </summary>
            <example>
            [Test]
            public void SampleTest ()
            {
            	WebTest t = new WebTest (new HandlerInvoker (MyCallback));
            	t.Run ();
            	Assert.AreEqual ("Was here", t.UserData.ToString());
            }
            static public void MyCallback ()
            {
            	WebTest.CurrentTest.UserData = "Was here";
            }
            </example>
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.WebTest.Response">
            <summary>
            The result of the last <see cref="M:MonoTests.SystemWeb.Framework.WebTest.Run" />. See <see cref="T:MonoTests.SystemWeb.Framework.Response" />,
            <see cref="T:MonoTests.SystemWeb.Framework.FormRequest" />.
            </summary>
            <seealso cref="M:MonoTests.SystemWeb.Framework.WebTest.Run" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.Response" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.FormRequest" />
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.WebTest.Invoker">
            <summary>
            Set the invoker, which is executed in the web context by <see cref="M:MonoTests.SystemWeb.Framework.WebTest.Invoke(System.Object)" />
            method. Most commonly used <see cref="T:MonoTests.SystemWeb.Framework.PageInvoker" />. See also: <see cref="T:MonoTests.SystemWeb.Framework.BaseInvoker" />,
            <see cref="T:MonoTests.SystemWeb.Framework.HandlerInvoker" /></summary>
            <seealso cref="M:MonoTests.SystemWeb.Framework.WebTest.Invoke(System.Object)" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.PageInvoker" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseInvoker" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.HandlerInvoker" />
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.WebTest.Request">
            <summary>
            Contains all the data necessary to create an <see cref="T:System.Web.HttpWorkerRequest" /> in
            the application appdomain. See also <see cref="T:MonoTests.SystemWeb.Framework.BaseRequest" />,
            <see cref="T:MonoTests.SystemWeb.Framework.PostableRequest" />, <see cref="T:MonoTests.SystemWeb.Framework.FormRequest" />.
            </summary>
            <seealso cref="T:System.Web.HttpWorkerRequest" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseRequest" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.PostableRequest" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.FormRequest" />
        </member>
        <member name="P:MonoTests.SystemWeb.Framework.WebTest.CurrentTest">
            <summary>
            The instance of the currently running test. Defined only in the web appdomain.
            In different threads this property may have different values.
            </summary>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.WebTest.Run">
            <summary>
            Run the request using <see cref="P:MonoTests.SystemWeb.Framework.WebTest.Request" /> and <see cref="P:MonoTests.SystemWeb.Framework.WebTest.Invoker" />
            values. Keep the result of the request in <see cref="T:MonoTests.SystemWeb.Framework.Response" /> property.
            </summary>
            <returns>The body of the HTTP response (<see cref="P:MonoTests.SystemWeb.Framework.Response.Body" />).</returns>
            <seealso cref="P:MonoTests.SystemWeb.Framework.WebTest.Request" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.WebTest.Invoker" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.Response" />
            <seealso cref="P:MonoTests.SystemWeb.Framework.Response.Body" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.WebTest.Invoke(System.Object)">
            <summary>
            This method must be called when custom <see cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" /> or aspx code behind is used,
            to allow the framework to invoke all user supplied delegates.
            </summary>
            <param name="param">Parameter defined by the <see cref="T:MonoTests.SystemWeb.Framework.BaseInvoker" /> subclass. For example,
            <see cref="T:MonoTests.SystemWeb.Framework.PageInvoker" /> expects to receive a <see cref="T:System.Web.UI.Page" /> instance here.</param>
            <seealso cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.BaseInvoker" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.PageInvoker" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.WebTest.RegisterException(System.Exception)">
            <summary>
            This method is intended for use from <see cref="M:MonoTests.SystemWeb.Framework.BaseInvoker.DoInvoke(System.Object[])" /> when
            the invocation causes an exception. In such cases, the exception must be registered
            with this method, and then swallowed. Before returning, <see cref="M:MonoTests.SystemWeb.Framework.WebTest.Run" />
            will rethrow this exception. This is done to hide the exception from <see cref="T:System.Web.HttpRuntime" />,
            which normally swallows the exception and returns 500 ERROR http result.
            </summary>
            <param name="ex">The exception to be registered and rethrown.</param>
            <seealso cref="M:MonoTests.SystemWeb.Framework.BaseInvoker.DoInvoke(System.Object[])" />
            <seealso cref="M:MonoTests.SystemWeb.Framework.WebTest.Run" />
            <seealso cref="T:System.Web.HttpRuntime" />
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.WebTest.CleanApp">
            <summary>
            Unload the web appdomain and delete the temporary application root
            directory.
            </summary>
        </member>
        <member name="M:MonoTests.SystemWeb.Framework.WebTest.CopyResource(System.Type,System.String,System.String)">
            <summary>
            Copy a resource embedded in the assembly into the web application
            </summary>
            <param name="type">A type in the assembly that contains the embedded resource.</param>
            <param name="resourceName">The name of the resource.</param>
            <param name="targetUrl">The URL where the resource will be available</param>
            <exception cref="T:System.ArgumentException">Thrown when resource with name resourceName is not found.</exception>
            <example>
                <code>CopyResource (GetType (), "Default.skin", "App_Themes/Black/Default.skin");</code>
            </example>
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.HandlerDelegate">
            <summary>
            Delegates to a ser callback that is used with <see cref="T:MonoTests.SystemWeb.Framework.HandlerInvoker" />.
            It is invoked during <see cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />.
            </summary>
            <seealso cref="T:MonoTests.SystemWeb.Framework.HandlerInvoker" />
            <seealso cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
        </member>
        <member name="T:MonoTests.SystemWeb.Framework.PageDelegate">
            <summary>
            Delegates to a user callback invoked during different
            <see cref="T:System.Web.UI.Page" /> lifecycle events and passing the page. Used
            with <see cref="T:MonoTests.SystemWeb.Framework.PageDelegate" />.
            </summary>
            <param name="page">
            </param>
            <seealso cref="T:System.Web.UI.Page" />
            <seealso cref="T:MonoTests.SystemWeb.Framework.PageDelegate" />
        </member>
    </members>
</doc>
