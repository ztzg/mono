<?xml version="1.0" encoding="utf-8" ?>
<doc>
	<class name="FbException" namespace="FirebirdSql.Data.Firebird">
		<overview>
			<summary>
			The exception that is thrown when Firebird Server returns a warning or error. 
			This class cannot be inherited.
			</summary>
			<remarks>
			<para>
			This class is created whenever the Firebird Server .NET Data Provider
			encounters an error generated from the server. 
			<b>FbException</b> always contains at least one instance of <see cref="FbError" />.
			</para>
			</remarks>
			<example>
				<code>
public void ThrowFbException() 
{
	string		 myConnString = "Database=C:\\PROGRAM FILES\\FIREBIRD\\EXAMPLES\\EMPLOYEE.GDB;User=SYSDBA;Password=masterkey;Dialect=3;Server=localhost";    
	FbConnection myConnection  = new FbConnection(myConnString);
	
	try 
	{
	myConnection.Open();
	}
	catch (FbException e) 
	{
	FbErrorCollection myErrors = e.Errors;
	    
	Console.WriteLine("Class: {1}", e.Class);
	Console.WriteLine("Error #{1}: {2} on line {3}.", e.Number, e.Message, e.LineNumber);
	Console.WriteLine("Error reported by {1} while connected to {2}", e.Source, e.Server);
	Console.WriteLine("Neither record was written to database.");
	Console.WriteLine("Errors collection contains:");

	for (int i=0; i &lt; myErrors.Errors.Count; i++) 
	{
		Console.WriteLine("Class: {1}", myErrors[i].Class);
		Console.WriteLine("Error #{1}: {2} on line {3}.", myErrors[i].Number, myErrors[i].Message, myErrors[i].LineNumber);
		Console.WriteLine("Error reported by {1} while connected to {2}", myErrors[i].Source, myErrors[i].Server);
	}
	}
}
				</code>
			</example>
		</overview>
		<property name="Errors">
			<summary>
			Gets a collection of one or more <see cref="FbError" /> objects that give detailed 
			information about exceptions generated by the Firebird .NET Data Provider.
			</summary>
		</property>
		<property name="ErrorCode">
			<summary>		
			Gets a value representing the Firebird error code
			</summary>
		</property>
		<method name="GetObjectData(SerializationInfo, StreamingContext)">
			<summary>
			Sets the serialization information about the exception.
			</summary>
			<param name="info">
			The SerializationInfo that holds the serialized object data about the exception being thrown.
			</param>
			<param name="context">
			The StreamingContext that contains contextual information about the source or destination. 
			</param>
		</method>		
	</class>
</doc>
