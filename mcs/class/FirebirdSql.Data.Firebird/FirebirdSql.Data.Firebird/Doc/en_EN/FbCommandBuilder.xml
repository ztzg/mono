<?xml version="1.0" encoding="utf-8" ?> 
<doc>
	<class name="FbCommandBuilder" namespace="FirebirdSql.Data.Firebird">
		<overview>
			<summary>    
			Automatically generates single-table commands used to reconcile changes 
			made to a DataSet with the associated data source. This class cannot be inherited.    
			</summary>
			<remarks>
			<para>    
			The <see cref="FbDataAdapter" /> does not automatically generate the SQL statements required to 
			reconcile changes made to a DataSet associated with the data source. However, you can create an 
			<b>FbCommandBuilder</b> object that generates SQL statements for single-table 
			updates by setting the SelectCommand property of the <see cref="FbDataAdapter" />. 
			Then, the <b>FbCommandBuilder</b> generates any additional SQL statements that you do not set.
			</para>
			<para>
			To generate INSERT, UPDATE, or DELETE statements, the <b>FbCommandBuilder</b> 
			uses the <see cref="FbDataAdapter.SelectCommand" /> property to retrieve a required set of metadata. 
			If you change the value of <see cref="FbDataAdapter.SelectCommand" /> after the metadata has been 
			retrieved (for example, after the first update), you then should call the 
			<see cref="FbCommandBuilder.RefreshSchema" /> method to update the metadata.
			</para>
			</remarks>
			<example>
				<code>
public DataSet SelectRows(DataSet myDataSet,string myConnection,string mySelectQuery,string myTableName) 
{
    FbConnection  myConn	 = new FbConnection(myConnection);    
    FbDataAdapter myDataAdapter = new FbDataAdapter();
    FbTransaction myTxn		 = myConn.BeginTransaction();
    
    myDataAdapter.SelectCommand = new FbCommand(mySelectQuery, myConn, myTxn);
    FbCommandBuilder custCB	 = new FbCommandBuilder(myDataAdapter);

    myConn.Open();

    DataSet custDS = new DataSet();
    myDataAdapter.Fill(custDS, "Employee");

    //code to modify data in dataset here

    //Without the FbCommandBuilder this line would fail
    myDataAdapter.Update(custDS, "Employee");

    myConn.Close();

    return custDS;
 }		
				</code>
			</example>    
		</overview>
		<property name="DataAdapter">
			<summary>
			Gets or sets an <see cref="FbDataAdapter" /> object for which 
			this <see cref="FbCommandBuilder" /> object will generate SQL statements.
			</summary>
			<remarks>
			The <see cref="FbCommandBuilder" /> registers itself as a listener for 
			<see cref="FbDataAdapter.RowUpdating" /> events that are generated by the 
			<see cref="FbDataAdapter" /> specified in this property.
			</remarks>
		</property>
		<property name="QuotePrefix">
			<summary>
			Gets or sets the beginning character or characters to use when working 
			with database objects (for example, tables or columns) whose names 
			contain characters such as spaces or reserved tokens.
			</summary>
			<exception cref="InvalidOperationException">
			This property cannot be changed after an insert, update, or delete command has 
			been generated.
			</exception>
			<remarks>
			<para>
			Some data sources may contain objects whose names include characters 
			such as spaces, commas, and semicolons. To accommodate this, use the 
			<b>QuotePrefix</b> and <see cref="FbCommandBuilder.QuoteSuffix" /> 
			properties to specify delimiters, such as a left and right bracket, that will encapsulate the object name.		
			</para>
			<para><b>Note:</b></para>
			<para>
			Although you cannot change the <see cref="FbCommandBuilder.QuotePrefix" /> or <see cref="FbCommandBuilder.QuoteSuffix" />
			properties after an insert, update, or delete command has been generated, you can change their 
			settings after calling the Update method of an <see cref="FbDataAdapter" />.
			</para>
			</remarks>		
		</property>
		<property name="QuoteSuffix">
			<summary>
			Gets or sets the ending character or characters to use when working with 
			database objects, (for example, tables or columns), whose names contain 
			characters such as spaces or reserved tokens.
			</summary>
			<exception cref="InvalidOperationException">
			This property cannot be changed after an insert, update, or delete command has 
			been generated.
			</exception>
			<remarks>
			<para>
			Some data sources may contain objects whose names include characters such 
			as spaces, commas, and semicolons. To accommodate this, use the 
			<see cref="FbCommandBuilder.QuotePrefix" /> and <b>QuoteSuffix</b>
			properties to specify delimiters, such as a left and right bracket, that will encapsulate the object name.
			</para>
			<para>Note:</para>
			<para>
			Although you cannot change the <see cref="FbCommandBuilder.QuotePrefix" /> or <b>QuoteSuffix</b>
			properties after an insert, update, or delete command has been generated, you can change their 
			settings after calling the Update method of an <see cref="FbDataAdapter" />.
			</para>
			</remarks>
		</property>
		<property name="CommandBuilderBehavior">
			<summary>
			One of the <see cref="FbCommandBuilderBehavior">FbCommandBuilderBehavior</see> values.
			</summary>
		</property>
		<property name="TimestampColumnName">
			<summary>
			The name of the timestamp column. The default value is an empty string.
			</summary>
		</property>
		<constructor name="ctor">
			<summary>
			Creates a new instance of the <see cref="FbCommandBuilder" /> class.
			</summary>
		</constructor>
		<constructor name="ctor(FbDataAdapter)">
			<summary>
			Creates a new instance of the <see cref="FbCommandBuilder" /> class with the 
			associated <see cref="FbDataAdapter" /> object.
			</summary>
			<param name="adapter">An <see cref="FbDataAdapter" /> object to associate with this <see cref="FbCommandBuilder" />.</param>
		</constructor>
		<destructor name="Finalize">
			<summary>
			Attempt to free resources and perform other cleanup operations before the <b>Object</b> is reclaimed by garbage collection.	
			</summary>
		</destructor>
		<method name="Dispose(System.Boolean)">
			<summary>
			Releases the unmanaged and, optionally, the managed resources used by the <see cref="FbCommandBuilder" /> object.
			</summary>
			<param name="disposing">
			True for dispose managed and unmanaged resources and false for dispose 
			anly the unmanaged resources.
			</param>
		</method>
		<method name="DeriveParameters(System.Data.FbCommand)">
			<summary>
			Populates the specified <see cref="FbCommand" /> object's 
			<see cref="FbCommand.Parameters" /> collection with parameter 
			information for a stored procedure specified in the <b>FbCommand</b>.
			</summary>
			<param name="command">
			The <see cref="FbCommand" /> referencing the stored procedure from 
			which the parameter information is to be derived. The derived 
			<see cref="FbCommand.Parameters" /> are added to the Parameters collection this command.
			</param>
			<exception cref="InvalidOperationException">The command text is not a valid stored procedure name.</exception>
			<remarks>
			<para>
			<b>DeriveParameters</b> overwrites any existing parameter information for the 
			<b>FbCommand</b>. 
			</para>
			<para>
			<b>DeriveParameters</b> requires an extra call to the data server to obtain the 
			information. If the parameter information is known in advance, it is more efficient 
			to populate the parameters collection by setting the information explicitly.
			</para>
			<para>
			You can only use <b>DeriveParameters</b> with stored procedures. You cannot use 
			<b>DeriveParameters</b> to populate the <see cref="FbParameterCollection" />
			with arbitrary DSQL statements, such as a parameterized SELECT statement.
			</para>
			</remarks>
		</method>
		<method name="GetInsertCommand">
			<summary>
			Gets the automatically generated <see cref="FbCommand" /> object required to perform 
			insertions at the data source.
			</summary>
			<returns>
			The automatically generated <see cref="FbCommand" /> object required to perform insertions.
			</returns>
			<remarks>
			<para>
			You can use the <b>GetInsertCommand</b> method for informational or troubleshooting 
			purposes because it returns the <see cref="FbCommand" /> object to be executed.
			You can also use <b>GetInsertCommand</b> as the basis of a modified command. 
			</para>
			<para>
			After the SQL statement is first generated, you must explicitly call 
			<see cref="FbCommandBuilder.RefreshSchema" /> if it changes the statement in any way. Otherwise, the 
			<b>GetInsertCommand</b> still will be using information from the previous statement, 
			which might not be correct. The SQL statements are first generated when the 
			application calls either Update or <b>GetInsertCommand</b>.
			</para>
			</remarks>
		</method>
		<method name="GetUpdateCommand">
			<summary>
			Gets the automatically generated <see cref="FbCommand" /> object required to perform 
			updates at the data source.
			</summary>
			<returns>
			The automatically generated <see cref="FbCommand" /> object required to perform updates.
			</returns>
			<remarks>
			<para>
			You can use the <b>GetUpdateCommand</b> method for informational or troubleshooting 
			purposes because it returns the <see cref="FbCommand" /> object to be executed.
			You can also use <b>GetUpdateCommand</b> as the basis of a modified command. 
			</para>
			<para>
			After the SQL statement is first generated, you must explicitly call 
			<see cref="FbCommandBuilder.RefreshSchema" /> if it 
			changes the statement in any way. Otherwise, the <b>GetUpdateCommand</b>
			still will be using information from the previous statement, which might 
			not be correct. The SQL statements are first generated when the application 
			calls either Update or <b>GetUpdateCommand</b>.
			</para>
			</remarks>
		</method>
		<method name="GetDeleteCommand">
			<summary>
			Gets the automatically generated <see cref="FbCommand" /> object required to perform 
			deletions at the data source.
			</summary>
			<returns>
			The automatically generated <see cref="FbCommand" /> object required to perform deletions.
			</returns>
			<remarks>
			<para>
			You can use the <b>GetDeleteCommand</b> method for informational or troubleshooting 
			purposes because it returns the <see cref="FbCommand" /> object to be executed.
			</para>
			<para>
			You can also use <b>GetDeleteCommand</b> as the basis of a modified command. 
			</para>
			<para>
			After the SQL statement is first generated, you must explicitly call 
			<see cref="FbCommandBuilder.RefreshSchema" /> if it 
			changes the statement in any way. Otherwise, the <b>GetDeleteCommand</b> 
			still will be using information from the previous statement,
			which might not be correct. The SQL statements are first generated when 
			the application calls either Update or <b>GetDeleteCommand</b>.
			</para>
			</remarks>
		</method>
		<method name="RefreshSchema">
			<summary>
			Refreshes the database schema information used to generate INSERT, UPDATE, 
			or DELETE statements.
			</summary>
			<remarks>
			You should call <b>RefreshSchema</b> whenever the <see cref="FbDataAdapter.SelectCommand" /> value of the 
			<see cref="FbDataAdapter" /> changes.
			</remarks>
		</method>
	</class>
</doc>