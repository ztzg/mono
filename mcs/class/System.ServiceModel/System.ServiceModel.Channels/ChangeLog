2009-03-05  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageHeader.cs, MessageHeaders.cs, MessageImpl.cs :
	  handle headers in SL2. Slightly changed 3.0 code too.

2009-03-04  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs : use cross domain access manager.

2009-02-27  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs : (in CreateBufferedCopy) do not pass the entire
	  message as BodyWriter.
	  (in GetReaderAtBodyContents) just write body contents.
	* MessageImpl.cs : do not try to read body at ctor (fixed tons
	  of test failures).
	  Add some state check in GetReaderAtBodyContents().
	* XmlReaderBodyWriter.cs : avoid possible extra xmldecl onto output.

2009-02-18  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs : do not forget to flush.
	* HttpRequestChannel.cs : give more exact error info.

2009-02-18  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs, MessageBufferImpl.cs, XmlReaderBodyWriter.cs :
	  make buffered copy in ML2 really buffered.

2009-02-12  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs : if there is no header item to write, do not write
	  SOAP header element.

2009-01-22  Alan McGovern  <amcgovern@novell.com>

	* MessageHeaders.cs : List<T>.RemoveAll(Predicate<T>) doesn't exist in Silverlight.
	Rewrite to avoid usage of it.

2009-01-14  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelParameterCollection.cs : implement, rather than NIE.

2008-05-22  Noam Lampert <noaml@mainsoft.com>

	* MessageFault.cs: Correctly serialize ExceptionDetails. Expose SimpleMessageFault to allow
	  internal users to know the type of the detail. 
	
2008-05-20  Noam Lampert <noaml@mainsoft.com>

	* Message.c: Use private setter for state private variable to ease debugging.
				 Modify ToString not to change the state, as it is called quite often by VS debugger
				 
2008-04-21  Roei Erez <roeie@mainsoft.com>

	* HttpChannleManager: Fix for multithreaded use.
	* HttpReplyChannel: Fix crash during sutdown.

2008-04-17  Igor Zelmanovich <igorz@mainsoft.com>

	* HttpChannleManager: ensure trailing slash in uri.

2008-04-17  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* added: HttpChannleManager,
	* HttpChannelListener: added use of HttpChannelManager

2008-04-17  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* MessageEncodingBindingElement.cs: fixed ctor

2008-04-17  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* XmlReaderBodyWriter.cs: fixed ctor, skip xml declaration

2008-04-17  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* HttpReplyChannel.cs: fixed TryReceiveRequest, fix message header To

2008-04-17  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* MessageFault.cs: fixed CreateFault11, implemented "detail"

2008-04-17  Noam Lampert <noaml@mainsoft.com>

	* HttpReplyChannel.cs: fix API - Fix crash during service shutdown.

2008-04-13  Igor Zelmanovich <igorz@mainsoft.com>

	* BindingElementCollection.cs: fix API - .ctor's signature.

2008-04-10  Eyal Alaluf <eyala@mainsoft.com>

	* XmlSerializerBodyWriter.cs: Removed.

2008-03-25  Vladimir Krasnov  <vladimirk@mainsoft.com>

	* MessageFault.cs: fixed WriteReason, .net XmlWriter compatible

2008-02-20  Atsushi Enomoto  <atsushi@ximian.com>

	* DuplexSessionChannelBase.cs : made it non-session (more reusable).
	* TcpChannelFactory.cs, TcpChannelListener.cs :
	  unify factory and listener into TcpChannelInfo for use in
	  TCP channel implementation. Do not store stream in the listener.
	  Factory now uses BinaryMessageEncoder.
	* TcpDuplexSessionChannel.cs : changes explained above, and now it
	  holds TcpClient that the listener has accepted.

	  tcp-transport-binding-element sample now communicates (though
	  only when both sides are mono: there seems binary mismatch).

2008-02-20  Atsushi Enomoto  <atsushi@ximian.com>

	* TcpTransportBindingElement.cs, TcpConnectionPoolSettings.cs :
	  clone connection pool settings too.
	* NamedPipetransportBindingElement.cs,
	  NamedPipeConnectionPoolSettings.cs : let's clean them up too (not
	  being likely implemented though).

2008-02-20  Atsushi Enomoto  <atsushi@ximian.com>

	* ConnectionOrientedTransportBindingElement.cs, 
	  TcpTransportBindingElement.cs : some API updates.
	  Initialize default values.
	* TcpConnectionPoolSettings.cs : new file.

2008-02-18  Atsushi Enomoto  <atsushi@ximian.com>

	* ServiceHostParser.cs, SvcHttpHandlerFactory.cs, SvcHttpHandler.cs:
	  added support for "factory" attribute.

2008-02-15  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestContent.cs : consider HttpResponseMessageProperty.

2008-02-15  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs : pass response ContentType to ReadMessage().

2008-02-15  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs : create WebRequest against To message header
	  item (if exists).
	  Consider HttpRequestMessageProperty.
	  Do not output body when suppressed or the method is GET.

2008-02-15  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpChannelListener.cs : BindingContext may not have listenUri
	  at its .ctor() step.

2008-02-08  Atsushi Enomoto  <atsushi@ximian.com>

	* BindingContext.cs : RemainingBindingElements is not just a dummy
	  collection but is actually user-controlled.

2008-02-08  Atsushi Enomoto  <atsushi@ximian.com>

	* TcpChannelFactory.cs, TcpChannelListener.cs, 
	  HttpChannelFactory.cs, HttpChannelListener.cs,
	  MsmqChannelFactory.cs, MsmqChannelListener.cs,
	  TextMessageEncodingBindingElement.cs,
	  BinaryMessageEncodingBindingElement.cs,
	  MtomMessageEncodingBindingElement.cs :
	  message encoder should be retrieved only through public API.
	* BindingContext.cs : so my old guess was wrong.

	See also: http://blogs.msdn.com/drnick/archive/2006/05/10/594134.aspx

2008-02-05  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpTransportBindingElement.cs : implemented copy constructor.

2007-08-20  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs, HttpReplyChannel.cs : treat SOAPAction HTTP
	  header when AddressingVersion is None.

2007-08-20  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageHeaders.cs : AddressingVersion.None rejects some WSA
	  property setters.

2007-08-19  Atsushi Enomoto  <atsushi@ximian.com>

	* OneWayBindingElementImporter.cs
	  CompositeDuplexBindingElementImporter.cs : new files.

2007-08-17  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageHeaders.cs : due to the DataContractSerializer.ReadObject()
	  semantic change, its bool parameter must be false, not true.

2007-07-13  Atsushi Enomoto  <atsushi@ximian.com>

	* InputChannelBase.cs, MsmqChannelListener.cs, MsmqInputChannel.cs :
	  new files. Msmq transport listener Implementation.
	* MsmqOutputChannel.cs : implemented Send(). Not sure if it works
	  (wait for System.Messaging impl.)
	* HttpReplyChannel.cs : added comment

2007-07-06  Atsushi Enomoto  <atsushi@ximian.com>

	* MsmqChannelFactory.cs MsmqOutputChannel.cs OutputChannelBase.cs :
	  new files. internal stuff for msmq channel.
	* BinaryMessageEncoder.cs : added another .ctor().
	* MsmqTransportBindingElement.cs :
	  implemented [Can]BuildChannelFactory().

2007-07-06  Atsushi Enomoto  <atsushi@ximian.com>

	* MsmqBindingElementBase.cs MsmqTransportBindingElement.cs :
	  initialize some fields.

2007-07-05  Atsushi Enomoto  <atsushi@ximian.com>

	* MsmqBindingElementBase.cs MsmqMessageProperty.cs
	  MsmqTransportBindingElement.cs ITransactedBindingElement.cs :
	  couple of msmq stubs.

2007-04-02  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : SecurityContextToken support (though
	  it is still regarded as invalid by WCF).

2007-03-13  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs, SecureMessageGenerator.cs :
	  make header.Contents.Add() more strict.
	  Use HasAsymmetricKey to determine whether to use asymmetric algorithm
	  or not.
	  Added some hack to allow ssl token external mode.
	  Commented out such lines that always premised asymmtric key.

2007-03-08  Atsushi Enomoto  <atsushi@ximian.com>

	* TransactionFlowBindingElement.cs : forgot necessary Clone().

2007-03-08  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : support check to create
	  authenticator is now done in both initiator/recipient sides.
	* SecurityRequestContext.cs : don't encrypt WS-Trust RSTR.

2007-03-07  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : for now, comment out the code
	  that makes authenticator creation optional.
	* SecurityRequestContext.cs : don't decrypt message when it is
	  WS-Trust messages. Also, do not secure SOAP Fault (it is likely
	  to fail).
	* SecurityChannelListener.cs : GetProperty<T>() now returns
	  MessageSecurityBindingSupport when requested. It is used by
	  EndpointDispatcher to check if it supports WS-Trust negotiation.
	* ChannelListenerBase.cs :
	  removed extra TODO and field. Implemented GetProperty<T>().
	* Message.cs : In CreateMessage() for SOAP Fault, create
	  SimpleMessage with IsFault = true.

2007-03-07  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityRequestContext.cs : try to reply fault with the inner
	  channel when an error occurred internally.
	* FaultConverter.cs : implemented based on OperationContext (at normal
	  state it does not seem to create messages, so I implemented it this
	  way).

2007-03-07  Atsushi Enomoto  <atsushi@ximian.com>

	* TransportBindingElement.cs : implemented GetProperty<T>().
	* TransactionFlowBindingElement.cs : on building factory or listener,
	  reject channel types that cannot build.
	* SecurityBindingElement.cs : added some TODO comments.
	* HttpTransportBindingElement.cs : GetProperty<T>() should rather
	  delegate to base, not BindingContext.
	* SecurityRequestContext.cs : somewhat late decryption.

2007-03-06  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs,
	  AsymmetricSecurityBindingElement.cs,
	  SymmetricSecurityBindingElement.cs :
	  renamed *SecurityBindingElementSupport to *SecurityCapabilities and
	  implemented ISecurityCapabilities on them. Now those binding
	  elements support GetProperty<ISecurityCapabilities>().

2007-03-05  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityBindingElement.cs : SetIssuerBindingContextIfRequired()
	  will work only for predefined parameter types.

2007-03-01  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs :
	  Set proper MessageDirection to the requirement after creation.
	  split CreateTokenAuthenticator() as MessageDirection is different.
	  Removed extra creation of requirement.

2007-03-01  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : token authenticator is not
	  always created on channel-opening stage.
	* SecurityBindingElement.cs : use SslSecurityTokenParameters for
	  Sslnego binding factory method.

2007-02-28  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : inconsistent ReferenceList has caused
	  signature velification failure.

2007-02-27  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : encrypt signature confirmations only
	  when they are required.

2007-02-27  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : SignatureConfirmation must be encrypted
	  when [Signature Protection is true i.e. when we use
	  SignBeforeEncryptAndEncryptSignature.

	  With this change finally samplesvc.cs/samplecli.cs became
	  interoperable(!)

2007-02-27  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageDecryptor.cs : signature verification was not done
	  for endorsing supporting tokens.
	* SecureMessageGenerator.cs : moved SignatureConfirmation position
	  in the security header. Don't output empty ReferenceList.

2007-02-27  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : signingToken was added before being
	  initialized and thus caused NRE.

2007-02-27  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs, SecureMessageDecryptor.cs,
	  SecureMessageGenerator.cs : use SHA1 instead of HMACSHA1. Now we
	  don't need workaround for symmetric key restoration.

2007-02-27  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs, SecureMessageDecryptor.cs,
	  SecureMessageGenerator.cs :
	  Avoid extra reference search from the request's ReferenceList.
	  create HMACSHA1 always with the key to compute hash (I'm not sure
	  it is correct; it is rather to adjust all hash consistent.)

2007-02-27  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageDecryptor.cs : verify that endorsing supporting tokens
	  actually endorsed the primary signature.
	* SecureMessageGenerator.cs : implemented endorsing of the primary
	  signature. So, now supporting tokens are fully implemented.

2007-02-27  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : so, those supporting tokens are
	  totally signing tokens.
	* SecureMessageGenerator.cs : Endorsing tokens should also be
	  included in the message. They are just not signed.

2007-02-26  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : support signing and encryption of
	  supporting tokens. Some required refactory to do it.
	* MessageSecurityBindingSupport.cs : added EncryptedData member.

2007-02-26  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageDecryptor.cs : fix exception message.
	* WSSecurityMessageHeader.cs, WSSignedXml.cs, WSEncryptedXml.cs :
	  XmlNamespaceManager is not required for GetIdElement().

2007-02-22  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageDecryptor.cs, WSSecurityMessageHeader.cs :
	  moved decryption part from former file to latter file, to reuse
	  SignedXml instance (though now I doubt how it actually was good)
	  which in turn required to replace EncryptedData in
	  WSSecurityMessageHeader with decrypted one.
	* WSEncryptedXml.cs : similar to WSSignedXml.cs, to handle wsu:Id.

2007-02-21  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : when we create DerivedKeyToken, those
	  EncryptedData should contain KeyInfo as it is not obvious which key
	  is used there. .net<->mono DerivedKeyToken introp is done.
	* SecureMessageDecryptor.cs : check derived key requirement.
	  Reduce dom-dependent parts.

2007-02-21  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs : ReferenceList needs to be bound to
	  the related DerivedKeyToken (if any).
	* SecureMessageGenerator.cs : largely done with DerivedKeyToken
	  support. Some refactoring to distinguish deried-token-related
	  variables.
	* SecureMessageDecryptor.cs : removed its own support for derived
	  key tokens. Now it fully works with DerivedKeySecurityToken.

2007-02-21  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs, SecureMessageDecryptor.cs,
	  SecureMessageDecryptor.cs :
	  Implemented increment token reading in o:Security, as
	  DerivedKeyToken could reference to existing wrapped key.
	  Removed WsscDerivedKeyToken and all relevant code.
	* SecureMessageGenerator.cs : replaced WsscDerivedKeyToken with
	  DerivedKeySecurityToken.

2007-02-16  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : it was setting security tokens into
	  incorrect SecurityMessageProperty.
	  Use correct WrappedKeySecurityToken for EncryptedKeySHA1.
	  Now it uses SecurityRequestContext instead of just primary key.
	* SecureMessageDecryptor.cs : removed extra lines. Limit workarounds
	  to symmetric reply decryption, which is the only trouble case.
	  Do not create another SignedXml.
	* WSSecurityMessageHeader.cs : SignedXml processing changes above.

2007-02-15  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageDecryptor.cs : Now it uses union token resolver and
	  the resolver works with in-progress token reading in o:Security.
	* WSSecurityMessageHeader.cs : now it does not read EncryptedKey
	  as EncryptedKeyIdentifierClause. It is rather a SecurityToken.
	* SecureMessageGenerator.cs : cosmetic refactoring.

2007-02-14  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs : read EncryptedKeyIdentifierClause
	  instead of EncryptedKey.

2007-02-13  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : SigningToken and EncryptionToken
	  should not be always prepared at channel Open(). It also caused
	  that extra token requirements.
	* SecureMessageGenerator.cs : use correct key clause for encryption.
	* SecureMessageDecryptor.cs : reduce extra key acquisition.

2007-02-06  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : added CreateTokenAuthenticator()
	  for supporting 'supporting tokens' .
	* SecureMessageGenerator.cs : Supporting token creation is done only
	  at initiator (not sure if it is supposed that, but for now it is).
	  Removed extraneous CollectSupportingTokens().
	* SecureMessageDecryptor.cs : implemented supporting token
	  authentication (partly). "Signed" supporting tokens are expected
	  to work fine.

2007-02-06  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs :
	  make SignBeforeEncryptAndEncryptSignature working.

2007-02-06  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : EncryptedKeySHA1 needs key hash, not
	  the key itself. ProtectionToken is WrappedKey.
	* SecureMessageDecryptor.cs : now it is internal encrypted key clause,
	  not EncryptedKeyIdentifierClause which is not for embedded key.
	* MessageProperties.cs : Fixed copy direction in CopyProperties().

2007-02-05  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : added DefaultKeyWrapAlgorithm
	  to switch asymmetric and symmetric. Not used yet.
	* SecurityRequestChannel.cs : now it pass the request security
	  property to reply receiver so that it could use the primary key
	  used at request phase.
	* SecurityRequestContext.cs : now it pass the context itself to
	  reply sender so that it could embed related MessageID.
	* SecureMessageGenerator.cs : ongoing changes to support symmetric
	  binding element. Add RelatesTo output and remove MessageID when
	  replying to the sender. Added some hacks to get symmetric binding
	  (kind of) working.
	* SecureMessageDecryptor.cs : ditto. Handle embedded encryption key
	  in SecurityTokenReference (it also involved existing encrypted key 
	  retrieval). In reply receiver, reuse the key that was used at
	  request phase. It needs significant token resolution refactoring.

2007-02-02  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : cosmetic refactoring.
	* SecureMessageDecryptor.cs : store token and its authentication
	  policies into the security property, and reuse it on reply.
	  Some code refactoring; there is at most one o:Security to solve at
	  one endpoint (depends on Actor). Some attempt to use correct
	  token parameters (but for now I have only samples that use x509).
	* SecureMessageGenerator.cs : For replying message, use initiator's
	  signing token as the encryption token. Simply reuse security
	  property from the input message.

	  I have some nasty workaround at decryptor for initiator that could
	  not retrieve decryption key.

2007-02-02  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs, SecurityChannelListener.cs,
	  SecurityRequestContext.cs, MessageSecurityBindingSupport.cs:
	  several refactoring on token acquisition. Large part of
	  MessageSecurityBindingSupport code is unified.

2007-02-02  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageProperties.cs : Security property should be one of the items.
	  Actually many other properties should be similar as well.
	* MessageImpl.cs, MessageBufferImpl.cs, Message.cs :
	  when copying a message, copy properties as well.
	* SecurityRequestContext.cs : on replying, pass input 
	  SecurityMessageProperty to the security generator.
	* SecureMessageGenerator.cs : both of above, for SignatureConfirmation
	  support.
	* WSSecurityMessageHeader.cs : fixed lazy .ctor() that did nothing.

2007-02-01  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSignedXml.cs:
	  MessageHeader.cs, Message.cs, WSSecurityMessageHeader.cs,
	  SecureMessageDecryptor.cs, SecureMessageGenerator.cs:
	  use new WSSignedXml instead of SignedXml, and remove coexisting
	  Id and wsu:Id. Now we can live only with wsu:Id and therefore
	  - our reply messages could be consumed by .NET, and
	  - .NET signature could be verified.

2007-02-01  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageDecryptor.cs : The signing key must be passed as
	  CheckSignature() argument, not SigningKey.

2007-01-31  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageImpl.cs : don't read attribute after ReadStartElement().

2007-01-31  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : some Release() refactoring.
	* SecureMessageGenerator.cs : use correct signing key clause for
	  SecurityTokenReferenceKeyInfo to be serialized.
	* SecureMessageDecryptor.cs : now it can try to parse signature.

2007-01-31  Atsushi Enomoto  <atsushi@ximian.com>

	Ongoing changes to support signature confirmation
	* SecureMessageGenerator.cs :
	  Don't output ReplyTo onto reply message.
	  Write SignatureConfirmation if needed.
	* SecureMessageDecryptor.cs :
	  Some refactoring for header cunsumption. Added commented-out
	  signature verification part (not working yet, on client side due
	  to incorrect reply from service and insufficient clause reader).
	* WSSecurityMessageHeader.cs :
	  Added SignatureConfirmation support.
	  KeyInfoClause for o:SecurityTokenReference should be replaced with
	  SecurityTokenReferenceKeyInfo.

2007-01-29  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : support Timestamp signature.
	  Removed unused code, and extra argument in CreateReference().
	* WSSecurityMessageHeader.cs : Timestamp also needs Id for SignedXml.

2007-01-29  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs :
	  Several fixes to make asymmetric binding working:
	  - Differentiate signing and encryption token in several areas.
	  - Fixed signing keyinfo.
	  Use SenderIdPrefix.
	  Added initial SecurityMessageProperty handling, not sure if it is
	  appropriate here though.
	* HttpRequestChannel.cs : (some debugging lines)

2007-01-26  Atsushi Enomoto  <atsushi@ximian.com>

	Woohoo! Here is a very basic WS-Security compliant message which could
	be allowed by Indigo.
	* MessageHeader.cs : added Id support for writing.
	* Message.cs : added internal BodyId for signature reference.
	* MessageImpl.cs : write Body Id if required.
	* SecureMessageGenerator.cs : Before signing, the target elements must
	  be given wsu:Id. Since I still use System.Security.dll, I need some
	  trick for signing (I give both Id and wsu:Id, former to sign and
	  latter to be consumed). Maybe I will have to replace xmldsig/xmlenc
	  implementation later. Now singning mechanism works except for
	  wsu:Timestamp (which is kind of mandatory).

	I can's still consume replies from Indigo but it's a big progress :)

2007-01-26  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageHeaderInfo.cs : added internal Id.
	* MessageHeader.cs : read and write wsu:Id.
	* Message.cs : output wsu namespace if Id exists in any header.
	* HttpReplyChannel.cs : (some debugging lines.)
	* SecureMessageDecryptor.cs : (remove debugging lines.)
	* MessageImpl.cs : removed obsolete code.
	* WSSecurityMessageHeader.cs : output "o" prefix.
	* SecureMessageGenerator.cs : replaced XmlElement-based header
	  signing with MessageHeader-based signing, to support Id correctly.

2007-01-15  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : some more refactoring and code comments.
	* MessageSecurityUtility.cs : made decryptor into an instance class,
	  like I've done for SecureMessageGenerator.
	* SecurityRequestContext.cs, SecurityRequestChannel.cs :
	  dependent changes for above.

2007-01-12  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : fixed derived keysize. derived key was
	  causing NRE due to the lack of token reference.
	  No need to pass doc to SignedXml.ctor() anymore.
	  Moved ReferenceList before the signature(s).

2007-01-12  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : add wsu:Timestamp to signing target.
	  Moved signing key generation code to non-HMACSHA1 signing part.
	  Don't try to sign wss:Security.
	  Pass document itself to SignedXml.ctor().
	  Use temporary DataObjects to avoid adding Ids (not sure what is the
	  expected processing yet).
	* WSSecurityMessageHeader.cs : to support timestamp signing, add
	  WriteTo() method in WsuTimestamp.

2007-01-12  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : wrong key was used for signing.
	  Omit KeyInfo for now - it seems that .net (sometimes?) omits it.

2007-01-11  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs :
	  Now ID generation process does not modify input message.
	  Moved derived key generation part into (virtual) signing loop.
	  MessagePartSpecification support for signing is done.

2007-01-11  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : some reordering to handle signing and
	  encryption with supporting tokens. Fixed XPath query bug for
	  soap header contents (we want s:Header/*, not s:Header).

2007-01-11  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : more refactoring.
	  Made it abstract and added Initiator- and Recipient- classes.
	  Several members were moved to those derived types.
	* AsymmetricSecurityBindingElement.cs, 
	  SymmetricSecurityBindingElement.cs
	  SecurityChannelFactory.cs, SecurityChannelListener.cs,
	  SecurityRequestChannel.cs, SecurityOutputChannel.cs,
	  SecurityRequestContext.cs, SecureMessageGenerator.cs :
	  All dependent changes by above. Removed ISecurityChannelSource
	  which became useless.

2007-01-11  Atsushi Enomoto  <atsushi@ximian.com>

	* SecureMessageGenerator.cs : encryption parts should exist too.
	* AsymmetricSecurityBindingElement.cs
	  SymmetricSecurityBindingElement.cs,
	  MessageSecurityBindingSupport.cs : some refactoring.
	  Split MessageSecurityBindingSupport into security binding element
	  specific parts and made MessageSecurityBindingSupport concrete.
	  It is likely split again, next time based on initiator/recipient.

2007-01-11  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs, SecureMessageGenerator.cs :
	  split encryptor part in the former file into latter file, and
	  make it nonstatic.
	* SecurityRequestChannel.cs, SecurityOutputChannel.cs,
	  SecurityRequestContext.cs : apply the change above.

2007-01-11  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs :
	  Fixed incorrect TrgGetValue() use.
	  Added CollectRecipientSupportingTokens().

2007-01-11  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs: acctually ReferenceList was inside
	  EncryptedKey. So, when a key itself is used to encrypt data,
	  ReferenceList is contained by itself.
	* MessageSecurityBindingSupport.cs :
	  added CollectInitiatorSupportingTokens().

2007-01-10  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs: it should support ReferenceList-less
	  messages.

2007-01-10  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs : reverted previous unnecessary change.
	* MessageSecurityUtility.cs : there already was uuid.

2007-01-09  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : replaced EncryptedKey with
	  WrappedKeySecurityToken, which seems to be in actual use in .net.
	* WSSecurityMessageHeader.cs : added internal Guid so that it
	  could be shared between header items.

2006-12-14  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestContext.cs, TextMessageEncoder.cs :
	  some null arg check.

2006-12-08  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : reducing DOM dependency. Use KeyInfoNode
	  for SecurityTokenReference resolution.

2006-12-08  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : fixed EncryptedData decryption to
	  consider DerivedKeyTokens correctly.
	  When creating LocalId, don't add '#' here.

2006-12-07  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs :
	  handle key mapping for each wsse:Security.

2006-12-07  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs : use prefix "c" for ws-secureconv.

2006-12-06  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs : write top-level ReferenceList in
	  wsse:Security.
	* MessageSecurityUtility.cs :
	  Now ReferenceList is placed under wsse:Security as WS-Security 1.1 
	  suggests, and it is used to dereference decryption targets.
	  Now it premises multiple wsse:Security elements to read.

2006-12-06  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs : don't write o:SecurityTokenReference
	  manually (and actually the namespace URI was wrong).

2006-12-06  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs : improved DerivedKeyToken writing
	  and reading.
	* MessageSecurityUtility.cs : DerivedKeyToken creation.

2006-12-06  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityBindingElement.cs,
	  SymmetricSecurityBindingElement.cs,
	  AsymmetricSecurityBindingElement.cs :
	  implemented SetKeyDerivation().

2006-12-06  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : don't add KeyInfoClause to EncryptedKey
	  more than once.

2006-12-06  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageBufferImpl.cs : XmlReader-based buffer is not possible, so
	  don't use it.

2006-12-05  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : u:Timestamp will be encrypted/signed,
	  thus move it in front of encryption/signing.

2006-12-04  Atsushi Enomoto  <atsushi@ximian.com>

	* TransactionFlowBindingElement.cs : OnOpen()/OnClose() should not
	  check state by themselves (btw it's not really working).
	* HttpChannelListener.cs : If the url does not end with '/' add it
	  so that it could be fed to HttpListener.

2006-12-04  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpChannelFactory.cs : check scheme on CreateChannel.
	* MessageHeader.cs : finish IsMessageVersionSupported().

2006-12-04  Atsushi Enomoto  <atsushi@ximian.com>

	* FaultConverter.cs : new file, not used yet though.

2006-10-21  Atsushi Enomoto  <atsushi@ximian.com>

	* SvcHttpHandler.cs : set GET URL to ServiceMetadataBehavior.

2006-10-20  Atsushi Enomoto  <atsushi@ximian.com>

	* SvcHttpHandler.cs : once AspNetReplyChannel get working with HTTP
	  GET as well as HttpReplyChannel, configuration would be ready now.

2006-10-18  Ankit Jain  <jankit@novell.com>

	* TextMessageEncoder.cs (MediaType): Use 'application/soap+xml' for
	EnvelopeVersion.Soap12 and 'text/xml' for others.
	* HttpReplyChannel.cs (TryReceiveRequest): Revert earlier patch for GET
	handling.
	Strip '?' from the query string.

2006-10-13  Ankit Jain  <jankit@novell.com>

	* MessageVersion.cs (None): Set AddressingVersion.None

2006-10-12  Atsushi Enomoto  <atsushi@ximian.com>

	* SvcHttpHandler.cs : added config-based endpoint addition code.
	  Though due to some weird bug in mono-core it does not seem to work,
	  so commented out for now.
	* HttpReplyChannel.cs : handle wsdl query parameter. btw creating
	  mex request message might just be wrong.
	  Use expected MessageVersion by the channel.
	* AspNetReplyChannel.cs : ditto. Plus, HTTP GET support.

2006-10-12  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : added DefaultSignatureAlgorithm
	  which differs depending on whether it is asymmetric or symmetric.
	* SecurityRequestChannel.cs, SecurityRequestContext.cs :
	  simplify SecureMessage() and DecryptMessage() arguments (just
	  take MessageSecurityBindingSupport instead of several parameters).
	* MessageSecurityUtility.cs :
	  - simplify SecureMessage() and DecryptMessage() arguments (just
	    take MessageSecurityBindingSupport instead of several parameters).
	  - Take token inclusion mode into account. Don't include them when
	    it is not expected. Also, change the token reference style.
	  - add wsa:MessageID to the headers.
	  - For hmac-sha1 signing (default for symmetric binding), use
	    symmetric key created for encryption as well to create HMACSHA1.
	  - add Id to wsu:Timestamp.
	  - start to handle SecurityMessageProperty.
	* WSSecurityMessageHeader.cs :
	  Added Id to WsuTimestamp. Also use prefixes for its XML output.
	  Changed date format.

2006-10-06  Atsushi Enomoto  <atsushi@ximian.com>

	* CommunicationObject.cs : reject faulted state on Open()/Close().
	* MessageHeaders.cs : removed extra fields.

2006-10-06  Ankit Jain  <jankit@novell.com>

	* HttpReplyChannel.cs (TryReceiveRequest): Handle HTTP GET.

2006-10-05  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs, SecurityRequestContext.cs :
	  added some FIXMEs and additional arg.

2006-10-05  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : remove duplicate Action header.

2006-10-05  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageFault.cs : partly implemented CreateFault(Message, int).
	* Message.cs, MessageImpl.cs, MessageBufferImpl.cs :
	  handle IsFault correctly in each implementation.

2006-10-04  Ankit Jain  <jankit@novell.com>

	* HttpRequestChannel.cs (ProcessRequest): Read till the end.

2006-10-04  Ankit Jain  <jankit@novell.com>

	* HttpRequestChannel.cs (ProcessRequest): Temporary workaround for a bug
	in WebConnectionStream.

2006-10-04  Ankit Jain  <jankit@novell.com>

	* MessageHeaders.cs (To): Use GetHeader<string> till
	DataContractSerializer gets ISerializable support.
	* CustomBinding.cs (.ctor): Get scheme from TransportBindingElement.

2006-10-04  Ankit Jain  <jankit@novell.com>

	* ServiceHostParser.cs (Parse):
	(Split): Add some error checks.

2006-10-03  Atsushi Enomoto  <atsushi@ximian.com>

	* SslStreamSecurityBindingElement.cs : updated API to Sep. CTP.
	* StreamUpgradeAcceptor.cs : Fix AcceptUpgrade().
	* SslStreamSecurityUpgradeProvider.cs,
	  SslStreamSecurityUpgradeAcceptor.cs :
	  new files for Ssl upgrade provider implementation.
	* MessageSecurityUtility.cs :
	  Create proper C14NTransform. Don't use enveloped signature
	  transform but sign every significant bits. On securing messages
	  use ChannelProtectionRequirements.
	* SecurityRequestContext.cs : pass ChannelProtectionRequirements to
	  SecureMessage().
	* MessageEncoder.cs : fix API (missing constraint).
	* WSSecurityMessageHeader.cs : it is MustUnderstand.
	* StreamUpgradeProvider.cs : API fix and implemented .ctor().
	* AsymmetricSecurityBindingElement.cs : default protection order is
	  SignBeforeEncryptAndEncryptSignature.

2006-09-29  Ankit Jain  <jankit@novell.com>

	* SvcHttpHandlerFactory.cs (GetTypeFromSvc): Extract and move code to
	ServicHostParser and use that here.
	(PrivateBinPath): New.
	(GetTypeFromBin): New. Load assembly from PrivateBinPath.
	(RemovedCallback): Remove and close the SvcHttpHandler when its
	corresponding file (.svc) changes.
	* SvcHttpHandler.cs (Close): New. Close the ServiceHost.

	* ServiceHostParser.cs : New.
	* CachingCompiler.cs : New. Code extracted from
	System.Web.Compilation.CachingCompiler
	* CompilationException.cs : New. From System.Web.Compilation
	* HtmlizedException.cs : New. Likewise.

2006-09-29  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : For client side, it is always
	  InitiatorServiceModelSecurityTokenRequirement which should be
	  created. Fixed wrong client encryption key acquisition.

2006-09-29  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityChannelListener.cs, SecurityRequestContext.cs,
	  MessageSecurityBindingSupport.cs : made similar changes as factories
	  to listener so that session channels and input channels would work.
	  Added authenticator creation.

2006-09-29  Atsushi Enomoto  <atsushi@ximian.com>

	* Binding.cs : added missing members.

2006-09-28  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityRequestChannel.cs, SecurityOutputChannel.cs,
	  MessageSecurityUtility.cs, MessageSecurityBindingSupport.cs :
	  reduce code duplication between request and output channels.
	  The common parts are now in MessageSecurityBindingSupport.
	  Now reduced several arguments in SecureMessage() for client.

2006-09-28  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelFactoryBase.cs : implemented ValidateCreateChannel().

2006-09-28  Atsushi Enomoto  <atsushi@ximian.com>

	* AsymmetricSecurityBindingElement.cs,
	  SecurityChannelListener.cs,
	  SecurityRequestContext.cs,
	  SymmetricSecurityBindingElement.cs,
	  SecurityRequestChannel.cs,
	  SecurityOutputChannel.cs,
	  SecurityChannelFactory.cs,
	  MessageSecurityBindingSupport.cs : 1) Refactoring. 
	  IMessageSecurityBindingSupport now becomes a class and contains
	  all the members which resided in ISecurityChannelSource.
	  Now it takes more constructor params.
	  Made dependent changes on all sources above.

	  2) Added SecurityTokenAuthenticator creation in
	  SecurityRequestChannel (SecurityOutputChannel should do the same).

2006-09-27  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityRequestChannel.cs : ongoing improvements on conditional
	  key creation. Actually there must be some part that creates an
	  authenticator (WinFX does that).

2006-09-27  Ankit Jain  <jankit@novell.com>

	Add suport for handling .svc files.
	* SvcHttpHandlerFactory.cs: New.
	* SvcHttpHandler.cs: New.

	* HttpChannelListener.cs (PopulateChannel): Use AspNetReplyChannel if in
	asp.net environment.
	(OnOpen): Do nothing in asp.net environment.
	(OnClose): Likewise.
	* HttpReplyChannel.cs (HttpRequestContext): Move to ..
	* HttpRequestContext.cs: .. here.

	* AspNetReplyChannel.cs: New.
	* AspNetRequestContext.cs: New.

2006-09-26  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs :
	  Significantly rewritten decryption parts to respect ReferenceList
	  to decrypt (so no workaround anymore).
	  Now e:ReferenceList inside o:Security is treated as the referenced
	  EncryptedType items are encrypted by 1) the derived key which is
	  immediately in front of it, or 2) the default key (it is according
	  to WS-SecureConversation section 9.1). Thus removed immediately
	  previous hack to auto-fill wsu:Id attributes.

	  On securing a message, generate correct Id and add DataReference
	  to ReferenceList properly.

2006-09-26  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs : handle ReferenceList. It is being
	  practically used.

2006-09-26  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs : handle DerivedKeyToken as a header content.
	  Actually WSSecurityTokenSerializer should be able to consume it, but after
	  spending a lot of time I still cannot successfully read it on WinFX.
	  Skip ReferenceList for now.
	* MessageSecurityUtility.cs :
	  Replaced some string literals with constants.
	  Added some workaround for DerivedKeyToken retrieval.
	  WinFX somehow sends incomplete ISO10126 padding which contains
	  bigger number than the key size and is rejected by EncryptedXml,
	  so added DecryptLax() which processes such ones in PaddingMode.None
	  to workaround it (only for cross-connection between mono and winfx).
	  Added some incomplete implicit wsu:Id processing.
	  Don't try to replace SignedXml with EncryptedData. It is not added
	  to the document tree.

2006-09-25  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : support message signature encryption. Some
	  more refactoring.

2006-09-22  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityBindingElement.cs : implement Clone(). Remove some MonoTODOs.

2006-09-22  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : fix warnings.

2006-09-22  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : actually there would be more than one
	  EncryptedData. Decrypt all.

2006-09-22  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : supply correct URIs in SecureMessage().
	  Use ISO10126 padding mode (it is not required but in manner).

2006-09-21  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : now that EncryptedXml decryption bug is
	  fixed, remove 16 bytes workaround (we still need encryption bugfix in
	  that class to make it work fine with mono client).
	  Removed buggy lines that reset decryption key to AES.
	  Modified GetKey() argument to take EncryptedData/EncryptedKey element.
	* WSSecurityMessageHeader.cs :
	  (SecurityTokenReferenceKeyInfo) support LoadXml.

2006-09-20  Atsushi Enomoto  <atsushi@ximian.com>

	* TransactionMessageProperty.cs : new file.

2006-09-20  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelPoolSettings.cs, OneWayBindingElement.cs : build fix, as
	  gmcs happened to report wrong code.

2006-09-19  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityChannelFactory.cs, SecurityChannelListener.cs :
	  .ctor() now requires ChannelProtectionRequirements which will be
	  supplied via BindingParameterCollection.
	* SymmetricSecurityBindingElement.cs,
	  AsymmetricSecurityBindingElement.cs : thus add
	  ChannelProtectionRequirement parameter to factory/listener.
	* SecurityRequestChannel.cs : use recipient token requirement to
	  create an encryption token. Thus differentiate the logic from
	  signing (initiator) token.

2006-09-19  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityChannelFactory.cs, SecurityChannelFactory.cs :
	  renamed former to latter.
	* SymmetricSecurityChannelListener.cs, SecurityChannelListener.cs :
	  ditto.

2006-09-19  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityBindingSupport.cs : new internal types to commonize
	  AsymmetricSecurityBindingElement and SymmetricSecurityBindingElement
	  and thus make internal factory and listener reusable.
	* SymmetricSecurityChannelFactory.cs, SecurityRequestContext.cs,
	  SecurityRequestChannel.cs, SecurityOutputChannel.cs,
	  SymmetricSecurityChannelListener.cs : rewrote dependent parts on
	  SymmetricSecurityBindingElement, using the new types above.
	* SymmetricSecurityBindingElement.cs :
	  Use SymmetricMessageSecurityBindingSupport.
	* AsymmetricSecurityBindingElement.cs :
	  thus implemented, using AsymmetricMessageSecurityBindingSupport.

2006-09-19  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelFactoryBase.cs : more RC1 update.

2006-09-19  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageEncoder.cs, BinaryMessageEncoder.cs, MtomMessageEncoder.cs,
	  TextMessageEncoder.cs : updated ReadMessage() API to RC1.
	* ChannelListenerBase.cs, ChannelListenerBase_1.cs,
	  ChannelBase.cs : RC1 API updates.
	* MessageImpl.cs : implemented Properties.
	* HttpReplyChannel.cs : added HttpRequestMessageProperty support.

2006-09-18  Ankit Jain  <jankit@novell.com>

	* MessageHeaders.cs (MessageId):
	(RelatesTo): UniqueId is not serializable, serialize it as a string.

2006-09-17  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelParameterCollection.cs : new file.
	* LayeredOutputChannel.cs, SecurityOutputChannel.cs :
	  new files for IOutputChannel implementation.
	* OneWayBindingElement.cs : hacky implementation.
	* SymmetricSecurityChannelFactory.cs : support IOutputChannel.
	* MessageSecurityUtility.cs : now create identifier from the security
	  token and the token parameters which is added as an argument.
	* SecurityRequestContext.cs,
	  SecurityRequestChannel.cs : SecureMessage() argument changes.
	  Set MessageSecurityVersion (SecurityTokenVersion) to the token
	  requirement.

2006-09-17  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs : close the HttpWebRequest.

2006-09-17  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs,
	  HttpChannelFactory.cs : implement async request/reply.
	* HttpChannelFactory.cs :
	  verify factory state when creating a channel.

2006-09-17  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageEncoder.cs, TextMessageEncoder.cs, MtomMessageEncoder.cs,
	  BinaryMessageEncoder.cs : added message version mismatch check.

2006-09-15  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityChannelListener.cs, SecurityRequestContext.cs :
	  Making incomplete changes to handle different tokens for encryption
	  and signature.
	* SymmetricSecurityChannelFactory.cs, SecurityRequestChannel.cs :
	  split channel implementation classes out to the latter file.
	* MessageSecurityUtility.cs : seems like there is
	  TimeStampValidityDuration property, so use it (incomplete; a server
	  needs another love).

2006-09-12  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs, SymmetricSecurityChannelFactory.cs,
	  SecurityRequestContext.cs : now that we have key identifier clause
	  and working ResolveKeyIdentifierClause(), just create keys inside
	  SecureMessage(). Add KeyInfo to the xmldsig.

2006-09-12  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityChannelFactory.cs, SecurityRequestContext.cs :
	  pass SecurityKeyIdentifierClause to SecureMessage().
	* SecurityBindingElement.cs : set X509ReferenceStyle as Thumbprint
	  for IssuedToken binding element.
	* SymmetricSecurityChannelListener.cs : removed hack to just create
	  X509 security token, and implemented correct token creation.
	* WSSecurityMessageHeader.cs : added new KeyInfoClause type that
	  wraps SecurityTokenReference element.
	* MessageSecurityUtility.cs : use the above.

2006-09-08  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs : raise MessageSecurityException when it
	  could not find a security header.
	* SymmetricSecurityChannelFactory.cs : now it also supports
	  IRequestSessionChannel. Extracted SecurityRequestChannel out from
	  the factory type.

2006-09-08  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityRequestContext.cs : moved securing message part to
	  MessageSecurityUtility.cs.
	* MessageSecurityUtility.cs : the change above.
	  use DateTime.Now for timestamp basis. Don't append signature to
	  the document. Instead it is added to the header. Capture body
	  content instead of the body itself.
	* SymmetricSecurityChannelFactory.cs : decrypt reply message to
	  be processed by upper layers.

2006-09-08  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageSecurityUtility.cs, WSSecurityMessageHeader.cs,
	  SymmetricSecurityChannelListener.cs,
	  SymmetricSecurityChannelFactory.cs, SecurityRequestContext.cs :
	  more refactoring. Request serialization became much more conformant
	  and add required header items.
	  Security Token retrieval is needed to send it in the request.
	  Fixed wrong key encryption.

2006-09-07  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityRequestContext.cs : the workaround was not functional.

2006-09-07  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityRequestContext.cs : some more refactoring. Use EncryptedXml
	  API, especially ReplaceData(), instead of native crypto stuff.
	* WSSecurityMessageHeader.cs : handle dsig:Signature as well (for
	  MessageProtectionOrder.SignBeforeEncrypt).

2006-09-07  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityRequestContext.cs : label should be combined of both
	  the client's and the server's.

2006-09-06  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityRequestContext.cs : enable key derivation (though for now
	  GenerateDerivedKey() is unimplemented). Create meaningful,
	  decrypted request message to be consumed by the upper layer.

2006-09-06  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityRequestContext.cs : implement Close() and Reply().
	  ongoing implementation of Reply(TimeSpan).
	* MessageSecurityUtility.cs : new file to collect utility methods.
	* SymmetricSecurityChannelFactory.cs : moved securing message code
	  to the above file.
	* SymmetricSecurityChannelListener.cs : tiny renaming.

2006-09-06  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityRequestContext.cs : security header is also stored.
	  removed NotImpl.
	* WSSecurityMessageHeader.cs : read EncryptedKey and EncryptedData
	  as well.

2006-09-06  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityChannelFactory.cs : tiny progress on securing
	  message.

2006-09-05  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityChannelFactory.cs : specify KeyUsage.Exchange
	  so that it retrieves the security key in that manner.

2006-09-05  Atsushi Enomoto  <atsushi@ximian.com>

	* Binding.cs : MessageVersion is null when there is no
	  MessageEncodingBindingElement.
	* Message.cs : null arg check.

2006-09-05  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelPoolSettings.cs, OneWayBindingElement.cs : new files.

2006-09-04  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityChannelListener.cs, SecurityRequestContext.cs, 
	  LayeredReplyChannel.cs, LayeredCommunicationObject.cs,
	  LayeredRequestChannel.cs : some refactoring.
	* SymmetricSecurityChannelFactory.cs :
	  ongoing secure message creation implementation.

2006-09-01  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityBindingElement.cs :
	  pass specific ServiceCredentialsSecurityTokenManager type to
	  SymmetricSecurityChannelListener as it needs ServiceCertificate.
	* SymmetricSecurityChannelListener.cs :
	  get service certificate. It's a temporary hack.
	  Move RequestContext code to below.
	* SecurityRequestContext.cs : new file.
	* WSSecurityMessageHeader.cs : implementing Read(), but to finish
	  it I have to finish decryption of the incoming message.

2006-08-31  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageImpl.cs : don't write attributes on the first body content
	  element *on soap Body element*.
	* MessageBufferImpl.cs : don't throw ArgumentNullException.
	  ObjectDisposedException is appropriate.
	* MessageHeader.cs : (RawMessageHeader) don't write element itself
	  in OnWriteHeader*Contents*().

2006-08-31  Atsushi Enomoto  <atsushi@ximian.com>

	* WSSecurityMessageHeader.cs : new file.
	* SymmetricSecurityChannelFactory.cs :
	  moved WSSecurityHeader and related types to the above.
	* SymmetricSecurityChannelListener.cs :
	  reject SOAP-env-less message.

2006-08-31  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityChannelListener.cs, SymmetricSecurityChannelListener.cs :
	  renamed former to latter.
	* SymmetricSecurityChannelFactory.cs :
	  create requirements every time. It is also likely that I need
	  another requirement instance to get service credentials here.

2006-08-30  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityBindingElement.cs : make BuildChannelListener()
	  similar to BuildChannelFactory() (set credentials, issuer binding
	  context etc.).
	* SecurityChannelListener.cs :
	  more ongoing security support implementation.
	* SymmetricSecurityChannelFactory.cs :
	  moved GetSecurityKey() to SymmetricSecurityRequestChannel.

2006-08-29  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityChannelListener.cs, SymmetricSecurityBindingElement.cs :
	  Renamed SecurityChannelListener to SymmetricSecurityChannelListener.
	  Implementation is underway.
	* LayeredReplyChannel.cs :
	  like LayeredRequestChannel, use ChannelListenerBase to provide
	  default timeouts.

2006-08-29  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageHeader.cs : added another implementation type that uses
	  XmlElement, for buffering purpose.
	* MessageImpl.cs : Header item types are user-driven by
	  MessageHeader.GetHeader<T>(int), so at storing phase just store
	  nodes as XmlElement.
	* MessageHeaders.cs : avoid dumping XmlNode to string to create
	  another XmlReader.

2006-08-28  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityBindingElement.cs : find ClientCredentials from
	  BindingParameterCollection, not from binding element properties.

2006-08-28  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityChannelFactory.cs, SymmetricSecurityChannelFactory.cs :
	  renamed former to latter.

2006-08-25  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityBindingElement.cs : SetIssuerBindingContext should also
	  work for SslSecurityTokenParameters.

2006-08-24  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityBindingElement.cs :
	  Added SetIssuerBindingContextIfRequired().
	* SecurityChannelFactory.cs :
	  Changed .ctor() arg again, just to receive binding element.
	* SymmetricSecurityBindingElement.cs :
	  Call SetIssuerBindingContextIfRequired() in BuildChannelFactory().
	  SymmetricSecurityChannelFactory .ctor() arg changes.
	  "ProtectionTokenParameters" is not passed now.

2006-08-23  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityBindingElement.cs : requirements should be
	  filled at InitializeSecurityTokenParameters as long as possible.
	  SymmetricSecurityChannelFactory<T> now does not receive
	  requirements (it now creates one inside it) at .ctor().
	* SecurityChannelFactory.cs : remove requirement argument.

2006-08-23  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityBindingElement.cs : implemented copy constructor.

2006-08-22  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityBindingElement.cs :
	  MessageSecurityVersion property is of type SecurityTokenVersion.
	* SecurityBindingElement.cs :
	  Implemented CreateSecureConversationBindingElement().
	  For CreateIssuedTokenBindingElement(), ProtectionTokenParameters is
	  the argument IssuedSecurityTokenParameters itself.

2006-08-22  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityBindingElement.cs :
	  CreateSecurityTokenManager() can be directly used now. 
	  Use CallInitializeSecurityTokenRequirement() to fill requirement
	  properties.

2006-08-16  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelFactoryBase.cs : GetProperty() is virtual.

2006-08-14  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityBindingElement.cs : in BuildChannelFactory(),
	  create token manager, token parameters and token requirements,
	  and fill some requirements.
	* TransportBindingElement.cs, HttpTransportBindingElement.cs,
	  TextMessageEncodingBindingElement.cs : workaround to not throw NIE.
	* BindingContext.cs : implemented RemainingBindingElements.
	  kill "no remaining binding element" error in GetInnerProperty()
	* SecurityChannelFactory.cs : now it became 
	  SymmetricSecurityChannelFactory, thus soon to be renamed.
	  Several ongoing actual security resolution is on.

2006-08-11  Atsushi Enomoto  <atsushi@ximian.com>

	* CommunicationObject.cs :
	  add GetCommunicationObjectType() and use it.
	* ChannelFactoryBase.cs, ChannelListenerBase_1.cs :
	  use ThrowIfDisposedOrNotOpen().
	* LayeredCommunicationObject.cs : have similar ThrowIf...() methods
	  to CommunicationObject. Make it IDisposable.
	* LayeredRequestChannel.cs : use above.
	* SecurityChannelFactory.cs : removed state check as it is done at
	  above class.

2006-08-10  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityBindingElement.cs : (CanBuildChannelFactory and
	  CanBuildChannelListener) directly dispatch to BindingContext.
	* SymmetricSecurityBindingElement.cs : require protection token
	  parameters before building a channel or a listener.
	* ChannelFactoryBase.cs : raise an error when a channel is being
	  created without opening the factory.
	* ChannelListenerBase_1.cs : ditto for the listener.
	* SecurityChannelFactory.cs : before sending a request, it must be
	  opened.

2006-08-07  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageBufferImpl.cs : initialize fields.
	  workaround BufferSize just to return 0.
	* MessageImpl.cs : for BodyWriter, don't use DefaultMessageBuffer
	  which does not support multi time write.
	* Message.cs : implemented State.

2006-08-07  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs : OnGetBodyAttribute() cannot return anything unless it
	  is consuming XmlReader.
	  Implemented OnCreateBufferedCopy(), to return XPathMessageBuffer.
	* MessageBuffer.cs : implemented CreateNavigator().
	* MessageBufferImpl.cs : added XPathMessageBuffer class.

	I kinda know that MS heavily depends on binary XmlReader and may have
	XPathNavigator implementation based on the binary stuff, but at
	least for now we have almost no motivation to mimick it.

2006-08-07  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityChannelFactory.cs : a bit more of security header code.

2006-08-04  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityBindingElement.cs :
	  set default MessageProtectionOrder in every construction.

2006-08-03  Atsushi Enomoto  <atsushi@ximian.com>

	* LayeredRequestChannel.cs, SecurityChannelFactory.cs : 
	  changed to require ChannelFactoryBase to support default timeout.
	  Made some methods non-virtual. Preparing code to add security
	  headers (empty yet).
	* SecurityBindingElement.cs : implemented several factory methods
	  that return SymmetricSecurityBindingElement.

2006-08-02  Atsushi Enomoto  <atsushi@ximian.com>

	* IStreamUpgradeBindingElement.cs,
	  StreamUpgradeBindingElement.cs : renamed from former to latter.

2006-08-02  Atsushi Enomoto  <atsushi@ximian.com>

	* IStreamUpgradeBindingElement.cs : API update, soon to be renamed.

2006-07-31  Ankit Jain  <jankit@novell.com>

	* MessageHeaders.cs (From): Use Constants.WSA1
	(MessageId): Implement the same pattern as other properties (From etc).

2006-07-28  Atsushi Enomoto  <atsushi@ximian.com>

	* LocalClientSecuritySettings.cs : initialize IdentityVerifier as well.
	* SecurityBindingElement.cs : some cosmetic changes.

2006-07-28  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityBindingElement.cs : LocalClientSettings and 
	  LocalServiceSettings returns an instance for each.
	* LocalClientSecuritySettings.cs : initialized fields.

2006-07-28  Atsushi Enomoto  <atsushi@ximian.com>

	* LocalClientSecuritySettings.cs : moved from S.SM.Description, and
	  kinda implemented Clone() just with MemberwiseClone().

2006-07-27  Ankit Jain  <jankit@novell.com>

	* MessageHeaders.cs (set_To): Use Uri.AbsoluteUri .
	* MessageHeader.cs (knownTypes): New. Known type array containing
	EndpointAddress10.
	(CreateHeader): Use knownTypes with the DataContractSerializer .ctor

2006-07-21  Atsushi Enomoto  <atsushi@ximian.com>

	* LayeredRequestChannel.cs, LayeredReplyChannel.cs,
	  LayeredCommunicationObject.cs,
	  SecurityChannelFactory.cs, SecurityChannelListener.cs :
	  new files to support security channels, though right now they
	  just pass inner channels through.
	* SymmetricSecurityBindingElement.cs : use above.

2006-07-21  Atsushi Enomoto  <atsushi@ximian.com>

	* AsymmetricSecurityBindingElement.cs,
	  SymmetricSecurityBindingElement.cs :
	  Default SecurityTokenParameters is null.

2006-07-20  Atsushi Enomoto  <atsushi@ximian.com>

	* AsymmetricSecurityBindingElement.cs : remove NotImpl for now.

2006-07-20  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs : When EnvelopeVersion is None, don't write SOAP
	  envelope.
	* MessageHeader.cs : don't write headers when EnvelopeVersion is None.
	* MessageHeaders.cs : When EnvelopeVersion is None, don't output
	  headers. When AddressingVersion is None, don't output addressing
	  headers as well, except for Action which is still needed by
	  service dispatcher.

2006-07-20  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageHeaders.cs : changed specific properties to find it from
	  headers as Action property does (local variables won't be set by
	  setter). Cache serializers. Check null serializer arguments.
	  For EndpointAddress, GetHeader<T>() shouldn't use serializer.

2006-07-19  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageHeader.cs : WriteTo() should treat EndpointAddress to not
	  use XmlObjectSerializer (since it is not data contract type).

2006-07-18  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageImpl.cs : Improved ReadHeaders().
	  For certain header items, use EndpointAddress.ReadFrom().

2006-07-18  Atsushi Enomoto  <atsushi@ximian.com>

	* AsymmetricSecurityBindingElement.cs :
	  it is not ISecurityCapabilities anymore.

2006-07-18  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageVersion.cs : added None.

2006-07-14  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs : GetReaderAtBodyContents() implementation using
	  writer methods.

2006-07-13  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs : CreateMessage(version,action,xmlReader) incorrectly
	  used MessageVersion.Default.

2006-07-12  Duncan Mak  <duncan@novell.com>

	* MessageBuffer.cs (MessageContentType): Return
	"application/soap+msbin1".

	* MessageImpl.cs (EmptyMessage.OnCreateBufferedCopy):
	(SimpleMessage.OnCreateBufferedCopy):
	(XmlReaderMessage.OnCreateBufferedCopy): Hook up with the new
	MessageBuffer implementations.

	* MessageBufferImpl.cs: Concrete implmentations for MessageBuffer.
	(DefaultMessageBuffer): Used by EmptyMessage and SimpleMessage.
	(XmlReaderMessageBuffer): Used by XmlReaderMessage.

2006-07-12  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageImpl.cs : Action should be added in request messages. Omit
	  it only in reply message, thus moved to dispatcher logic.

2006-07-12  Ankit Jain  <jankit@novell.com>

	* HttpRequestChannel.cs (HttpRequestChannel.Request): Workaround for a
	bug in WebConnectionStream.
	* MessageHeaders.cs (MessageHeaders.From):
	(MessageHeaders.ReplyTo):
	(MessageHeaders.To): Add the corresponding MessageHeader on set.

2006-07-11  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageImpl.cs : when AddressingVersion is None (e.g. POX), don't
	  add SOAP Action to the response at any time.

2006-07-10  Atsushi Enomoto  <atsushi@ximian.com>

	* SymmetricSecurityBindingElement.cs,
	  SecurityBindingElement.cs : They are not ISecurityCapabilities now.
	  Implemented .ctor() and some properties.

2006-07-10  Atsushi Enomoto  <atsushi@ximian.com>

	* TransactionFlowBindingElement.cs : new file.
	* HttpTransportBindingElement.cs : added missing KeepAliveEnabled.

2006-07-06  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageFault.cs :
	  DefaultAction vanished. CreateFault() now takes bufferSize arg.
	* MessageHeaders.cs : ArgumentException -> MessageHeaderException.
	* AddressingVersion.cs : added None. Equals() and GetHashCode()
	  vanished (there is anyways no way to instantiate this type).
	* MessageVersion.cs : added Soap11 and Soap12.
	* TextMessageEncoder.cs : silly quotation mark wrapper disappeared
	  in June CTP. goodie.

2006-07-05  Atsushi Enomoto  <atsushi@ximian.com>

	* MtomMessageEncoder.cs, BinaryMessageEncoder.cs, Message.cs :
	  removed some vanished CreateMessage() overloads.

2006-07-05  Atsushi Enomoto  <atsushi@ximian.com>

	* CustomBinding.cs, HttpsTransportBindingElement.cs, 
	  HttpTransportBindingElement.cs :
	  They are not ISecurityCapabilities anymore.
	  Modified code to match June CTP behavior.

2006-07-05  Atsushi Enomoto  <atsushi@ximian.com>

	* StreamSecurityUpgradeProvider.cs : Identity -> EndpointIdentity.

2006-07-05  Atsushi Enomoto  <atsushi@ximian.com>

	* EmptyFaultException.cs : removed unused code.
	* IRequestContext.cs, RequestContext.cs : renamed former to latter.

2006-07-05  Atsushi Enomoto  <atsushi@ximian.com>

	* LayeredChannelFactory.cs : removed obsolete class.
	* ChannelFactoryBase.cs, HttpChannelFactory.cs,
	  ChannelListenerBase.cs, HttpChannelListener.cs,
	  HttpReplyChannel.cs, ChannelManagerBase.cs :
	  all those changes were brought by ChannelManagerBase changes.

2006-07-05  Atsushi Enomoto  <atsushi@ximian.com>

	* ReplyChannelBase.cs, HttpChannelFactory.cs, ChannelBase.cs
	  CommunicationObject.cs, HttpChannelListener.cs,
	  ChannelFactoryBase.cs :
	  CommunicationObject abstract changes brought this madness.

2006-07-05  Atsushi Enomoto  <atsushi@ximian.com>

	* BindingContext.cs : listenUri address parameters could be null in
	  June CTP.

2006-07-05  Atsushi Enomoto  <atsushi@ximian.com>

	* IRequestContext.cs :
	  Now it became a class. File renaming will follow soon.
	* IChannelFactory.cs, IInputChannel.cs, IReplyChannel.cs,
	  IDuplexChannel.cs, IDuplexSessionChannel.cs,
	  IOutputChannel.cs, IOutputSessionChannel.cs,
	  IRequestChannel.cs, IRequestSessionChannel.cs :
	  They are not IDisposable anymore.
	  For IReplyChannel, IRequestContext -> RequestContext.
	* IChannelListener.cs : removed Identity. Added GetProperty().
	* ChannelListenerBase.cs, ChannelListenerBase.cs,
	  ReplyChannelBase.cs, HttpReplyChannel.cs :
	  Several members disappeared, and dependent changes.
	* HttpTransportBindingElement.cs,
	  HttpChannelListener.cs, :
	  ChannelListenerBase.SharedChannelListener vanished.

2006-07-05  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageEncodingBindingElement.cs
	  MtomMessageEncodingBindingElement.cs,
	  TextMessageEncodingBindingElement.cs,
	  BinaryMessageEncodingBindingElement.cs :
	  June CTP updates: AddressingVersion -> MessageVersion.
	* Binding.cs : June CTP. MessageVersion is added.
	* ChannelBase.cs, BindingContext.cs, IChannel.cs
	  ChannelListenerBase_1.cs,
	  ChannelListenerBase.cs, IChannelListener.cs,
	  IChannelFactory.cs,
	  ChannelFactoryBase.cs, ChannelManagerBase.cs :
	  June CTP. Several interface changes.
	* HttpTransportBindingElement.cs : June CTP. HttpMappingMode is gone.
	* IChannelManager.cs, LayeredChannelListener.cs,
	  GenericWrapperChannelFactory.cs,
	  GenericWrapperChannelListener.cs : They are not used anymore.

2006-07-04  Atsushi Enomoto  <atsushi@ximian.com>

	* MtomMessageEncoder.cs, BinaryMessageEncoder.cs :
	  sync fix with June CTP API updates.

2006-07-03  Ankit Jain  <jankit@novell.com>

	* MessageEncodingBindingElementConverter.cs:
	* StandardBindingConverter.cs:
	* TransportBindingElementConverter.cs:
	* TransactionFlowBindingElementConverter.cs:
	* ReliableSessionBindingElementConverter.cs:
	* SecurityBindingElementConverter.cs:
	Rename *Converter.cs to *Importer.cs

	* TransferMode.cs: Move to System.ServiceModel

2006-06-22  Atsushi Enomoto  <atsushi@ximian.com>

	* CommunicationObject.cs : make sure to change State before
	  OnClosing/OnClosed/OnOpening/OnOpened when they are overriden.

2006-06-20  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs : output WSAddressing xmlns only when Action is
	  specified (To should be affected, but seems like it is ignored).

2006-06-20  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageImpl.cs : don't set Action when it is null.

2006-06-12  Ankit Jain  <jankit@novell.com>

	* TransportBindingElementConverter.cs (ImportEndpoint): Implement.

2006-05-29  Atsushi Enomoto  <atsushi@ximian.com>

	* SecurityBindingElement.cs, SecurityBindingElementConverter.cs :
	  some updated API fixes.

2006-05-29  Atsushi Enomoto  <atsushi@ximian.com>

	* EnvelopeVersion.cs : moved back to S.SM.

2006-05-29  Atsushi Enomoto  <atsushi@ximian.com>

	* IBindingManualAddressing.cs : vanished in beta2.
	* HostedTransportConfiguration.cs, EnvelopeVersion.cs,
	  LocalClientSecuritySettings.cs, LocalServiceSecuritySettings.cs :
	  namespace changes.
	* SecurityBindingElement.cs :
	  SecurityStandardsManager -> SecurityTokenSerializer.

2006-05-29  Atsushi Enomoto  <atsushi@ximian.com>

	* XmlSerializerBodyWriter.cs : new file to handle 
	  TypedMessageConverter.ToMessage().

2006-04-26  Ankit Jain  <jankit@novell.com>

	* TransportBindingElementConverter.cs (BeforeImport): Remove
	NotImplementedException.
	(ImportContract): Likewise.
	* CustomBinding.cs (.ctor): Use scheme from the binding parameter.

2006-04-14  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs, HttpChannelFactory.cs : message encoder 
	  being used was not reflecting that of Binding elements.

2006-04-07  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpReplyChannel.cs : when SOAP action is not set as a header item,
	  just assume that it is in the message.

2006-04-06  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpReplyChannel.cs : actually HTTP header item might be null.

2006-04-06  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpReplyChannel.cs : under SOAP 1.1 SOAP Action is sent as HTTP
	  header.

2006-04-06  Atsushi Enomoto  <atsushi@ximian.com>

	* TextMessageEncoder.cs : for SOAP 1.1 content type is text/xml.

2006-04-06  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageFault.cs : Fixed SOAP12 reason output.

2006-04-05  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpReplyChannel.cs : no need to set response ContentEncoding since
	  MessageEncoder.ContentType explicitly contains encoding.
	* AddressingVersion.cs : added ActionNotSupported property. Not sure
	  if it is SOAP version dependent.

2006-03-23  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpReplyChannel.cs : actually I could just workaround bug #77816.

2006-03-16  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpChannelFactory.cs BindingContext.cs
	  HttpChannelListener.cs HttpTransportBindingElement.cs :
	  Now BindingContext holds MessageEncoder, and non-custom
	  channel factory/listener should use it.
	* MtomMessageEncodingBindingElement.cs
	  TextMessageEncodingBindingElement.cs
	  BinaryMessageEncodingBindingElement.cs : BuildChannelFactory()/
	  -Listener() now sets internal BindingContext.MessageEncoder.
	  Fixed some public API.

2006-03-15  Atsushi Enomoto  <atsushi@ximian.com>

	* BindingContext.cs : CanBuildChannelXXX() should not raise error
	  for insufficient elements.
	* DispatchRuntime.cs : OperationDescription name is not action. So
	  OperationSelector is created by name, not by action.
	* TextMessageEncodingBindingElement.cs : Feb. CTP API fixes.

2006-03-14  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageFaultBodyWriter.cs
	  XmlReaderBodyWriter.cs
	  XmlObjectSerializerBodyWriter.cs : made internal.
	* SecurityBindingElement.cs
	  AsymmetricSecurityBindingElement.cs
	  SymmetricSecurityBindingElement.cs : API fixes.
	* TransportBindingElementConverter.cs : ditto.
	* TextMessageEncodingBindingElement.cs : added set_AddressingVersion.
	* WindowsStreamSecurityBindingElement.cs
	  SslStreamSecurityBindingElement.cs
	  TransportSecurityBindingElement.cs : new files.

2006-03-14  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageImpl.cs : according to the W3C REC, mustUnderstand when
	  reading can be any xs:boolean value.

2006-03-14  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs MessageImpl.cs : more sorting out the role of each
	  write method.
	* MessageHeader.cs : use envelope namespace, not addressing namespace.

2006-03-14  Atsushi Enomoto  <atsushi@ximian.com>

	* Message.cs : don't write body contents if it is empty.
	  Moved WriteStartElement(,"Header",) to OnWriteStartHeaders().
	* MessageImpl.cs : implemented XmlReaderMessage.OnWriteBodyContents().
	* TextMessageEncoder.cs : WriteMessage() should close XmlWriter.
	* HttpRequestChannel.cs : close request stream before GetResponse().

2006-03-13  Atsushi Enomoto  <atsushi@ximian.com>

	* TextMessageEncoderFactory.cs
	  TextMessageEncoder.cs : encoder does not hold reference to the
	  factory anymore. Use MessageVersion property in CreateMssage().
	* HttpChannelListener.cs : now it holds message encoder.
	* HttpReplyChannel.cs : now it uses listener's shared message encoder.
	* MessageImpl.cs : header is optional.
	* EnvelopeVersion.cs : namespace URI is missing.

2006-03-10  Atsushi Enomoto  <atsushi@ximian.com>

	* CustomBinding.cs : removed Initialize().
	* Message.cs : renamed ForwardingMessage -> XmlReaderMessage.
	* MessageImpl.cs : renamed ForwardingMessage to XmlReaderMessage (used
	  by Message.CreateMessage(MessageVersion,XmlReader,int) and
	  implemented Headers, IsEmpty and GetReaderAtBodyContents().

2006-03-08  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageHeaders.cs : implemented GetReaderAtHeader() and Action (it
	  could be also added by Add() method and could be reset by Remove()).
	* MessageImpl.cs : implemented more. As noted above, Now we don't 
	  have to add Action header explicitly.
	* MessageHeader.cs : recovered Writer methods and ToString() from
	  commented old version. Use prefixes for writing.
	  Use WriteObjectContent() rather than WriteObject() (it needs
	  DataContractSerializer fix btw).

2006-03-08  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageHeader.cs : added missing IsReferenceParameter.
	* MessageHeaderInfo.cs : added missing IsReferenceParameter.
	* MessageHeaders.cs : avoid NullRef when actors is null.
	* MessageImpl.cs : (MessageImplBase) add Action header in .ctor().
	  (ForwardingMessage) reader consumer is being added (not done).
	* MtomMessageEncodingBindingElement.cs : simply use Mtom factory.
	* MtomMessageEncoder.cs : updated ContentType value to Feb. CTP.
	* HttpRequestChannel.cs : this channel automatically call Open()
	  when Request() is called. Set content length for request.
	  Use MessageEncoder's ContentType to also handle charset.

2006-03-07  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageImpl.cs : make them internal.
	* HttpReplyChannel.cs : set HttpListenerResponse properties correctly.

2006-03-07  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelManagerBase.cs : cleanup MonoTODO and unused field.
	* HttpChannelListener.cs : removed commented line.
	* RequestChannelBase.cs : new base class for request channel classes.
	* ChannelListenerBase.cs : OnEndClose() is rather NotImplemented yet.
	* HttpReplyChannel.cs : WaitHandle accepts limited timeout value.
	* Message.cs : default IsEmpty and IsFault false by default.
	* LayeredChannelListener.cs : removed Uri (no chance to set).
	* ChannelBase.cs : reimplemented timeout properties.
	* HttpRequestChannel.cs : now it is mostly based on
	  RequestChannelBase. Some more attempt to implement Request().

2006-03-07  Atsushi Enomoto  <atsushi@ximian.com>

	* Binding.cs CustomBinding.cs : removed OnApplyConfiguration() and
	  OnInitialize(). Added more BuildChannelListener() overloads.

2006-03-06  Atsushi Enomoto  <atsushi@ximian.com>

	* Binding.cs : added some more missing members especially to support
	  listener creation.
	* HttpChannelListener.cs : Uri should not be null.
	* HttpTransportBindingElement.cs : implemented
	  CanBuildChannelFactory() and CanBuildChannelListener().
	* ServiceHostBase.cs : make Initialize() practically work at OnOpen().

2006-03-06  Atsushi Enomoto  <atsushi@ximian.com>

	* Binding.cs : updated default namespace property value to Feb. CTP.

2006-03-03  Atsushi Enomoto  <atsushi@ximian.com>

	* AddressHeader.cs : avoid null reference when value is null.
	* BindingContext.cs : check null ListenUri args.

2006-03-03  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageFault.cs : Fixed default action name. Null arg check.

2006-03-03  Atsushi Enomoto  <atsushi@ximian.com>

	* BindingElement.cs : Dequeue elements in BindingContext directly.
	* BindingContext.cs : Added GetProperty<T>().
	* GenericWrapperChannelFactory.cs GenericWrapperChannelListener.cs :
	  Now we don't need these extra classes, so marked as deprecated.

2006-03-03  Atsushi Enomoto  <atsushi@ximian.com>

	* Binding.cs : null arg check.
	* AddressingVersion.cs : fixed constants to pass the tests.
	* BindingElement.cs : tiny meessage fix.

2006-03-02  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageEncodingBindingElement.cs
	  BinaryMessageEncodingBindingElement.cs
	  TextMessageEncodingBindingElement.cs
	  MtomMessageEncodingBindingElement.cs
	  MessageEncodingBindingElementConverter.cs : several API fixes.
	* BindingElement.cs : now if we use generic wrapper it causes
	  infinite loop, so for now replace it with most-possible-but-
	  untested logic.

2006-03-02  Atsushi Enomoto  <atsushi@ximian.com>

	(back to normal "record-ChangeLogs" mode after the big API change mess)
	* HttpTransportBindingElement.cs : fixed minor API differences.

2006-02-23  Atsushi Enomoto  <atsushi@ximian.com>

	* AsymmetricSecurityBindingElement.cs SecurityBindingElement.cs
	  SymmetricSecurityBindingElement.cs :
	  Dependent fixes for System.IdentityModel reorgainzation.

2006-02-23  Atsushi Enomoto  <atsushi@ximian.com>

	* InputChannelBase.cs.notused IInputSession.cs IOutputSession.cs
	  IProxyFormatter.cs WSHttpBindingBase.cs 
	  PnrpPeerResolverBindingElement.cs IMessageHeaderInfo.cs
	  MessageInterceptorEventArgs.cs WSHttpBinding.cs
	  WSFederationBinding.cs ISessionChannel.cs
	  CompositeDuplexBindingElement.cs MessageVersion.cs
	  MessageHeader.cs IRequestSessionChannel.cs 
	  BindingElementCollection.cs IReplySessionChannel.cs
	  MessageProperties.cs IDuplexClientChannel.cs
	  IInputSessionChannel.cs MessageImpl.cs IDuplexSessionChannel.cs
	  TcpTransportBindingElement.cs EmptyFaultException.cs
	  IBindingRuntimePreferences.cs AddressHeaderCollection.cs
	  IStubFormatter.cs AsymmetricSecurityBindingElement.cs
	  ConnectionOrientedTransportBindingElement.cs
	  IProxyOperationSelector.cs MessageBuffer.cs IChannel.cs
	  PeerResolverBindingElement.cs Message.cs
	  HttpsTransportBindingElement.cs BindingElement.cs
	  NamedPipetransportBindingElement.cs IBindingManualAddressing.cs
	  MessageFaultBodyWriter.cs IReplyChannel.cs
	  IBindingCapabilities.cs AddressHeader.cs IInputChannel.cs
	  IMessageProperty.cs IOutputChannel.cs NetPeerTcpBinding.cs
	  IRequestContext.cs IInputSessionShutdown.cs
	  SecurityBindingElement.cs PeerTransportBindingElement.cs
	  IDuplexSession.cs IChannelInitializer.cs
	  IProxyMessageInspector.cs IChannelListener.cs NetTcpBinding.cs
	  AddressingVersion.cs FaultException.cs
	  IRequestChannel.cs MtomMessageEncodingBindingElement.cs
	  TransportBindingElement.cs BinaryMessageEncodingBindingElement.cs
	  TextMessageEncodingBindingElement.cs IChannelFactory.cs Binding.cs
	  ITransportBindingElement.cs IChannelManager.cs MessageFault.cs
	  MessageHeaders.cs IStubMessageInspector.cs UnderstoodHeaders.cs
	  BindingParameterCollection.cs IInstanceProvider.cs
	  WSDualHttpBinding.cs ISession.cs IErrorHandler.cs
	  MessageEncodingBindingElement.cs HttpTransportBindingElement.cs
	  IDuplexChannel.cs CustomBinding.cs IOutputSessionChannel.cs
	  MessageContractAttribute.cs SymmetricSecurityBindingElement.cs :
	  moved from System.ServiceModel due to the API changes.

2006-02-23  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelFactoryBase.cs ChannelListenerBase.cs HttpChannelFactory.cs
	  HttpChannelListener.cs HttpRequestChannel.cs
	  LayeredChannelListener.cs PeerMessagePropagationFilter.cs
	  PeerNode.cs ReplyChannelBase.cs :
	  Feb. CTP API changes - chapter 1.

2006-02-15  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelBase.cs : OnOpen() and OnClosed() do nothing.
	* ReplyChannelBase.cs : now it is based on ChannelBase.
	* ChannelListenerBase_1.cs : use DefaultCommunicationTimeouts.Instance
	  and check null argument in .ctor().
	* HttpReplyChannel.cs : several changes.
	  Non-async members are mostly implemented.
	* HttpChannelListener.cs : no need to receive 
	  IDefaultCommunicationTimeouts.
	* HttpRequestChannel.cs : maxSizeOfHeaders is used in MessageHeaders
	  to allocate buffer array and int.MaxValue causes OutOfMemory.

2006-02-15  Atsushi Enomoto  <atsushi@ximian.com>

	* ClientFramingDecoderState.cs : added missing enum.
	* HttpRequestMessageProperty.cs HttpResponseMessageProperty.cs :
	  added missing bits.
	* ChannelBase.cs, LayeredChannelListener.cs : tiny API fixes.

2006-02-15  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpChannelListener.cs : Added GetChannels() and OnClose().
	  AcceptChannel() has some code now but it needs more love.

2006-02-14  Atsushi Enomoto  <atsushi@ximian.com>

	* CommunicationObject.cs : Close() does not call Begin/EndClose().
	* ChannelManagerBase.cs : implemented AbortChannel and CloseChannel.
	* ChannelListenerBase.cs : implemented OnAbort and OnClose.

2006-02-10  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs : close the streams.
	* HttpListener.cs
	  HttpChannelListener.cs : renamed from former to latter.

2006-02-09  Atsushi Enomoto  <atsushi@ximian.com>

	* ReplyChannelBase.cs : new file for IReplyChannel implementations.
	* HttpReplyChannel.cs : new file for HTTP IReplyChannel.
	* HttpListenerFactory.cs : removed obsolete file.
	* HttpListener.cs : hacky WaitForChannel and AcceptChannel.
	* ChannelListenerBase_1.cs : implemented virtual stuff.
	* CommunicationObject.cs : Open() should not call BeginOpen() and
	  EndOpen(). Instead, invoke events individually.
	* ChannelListenerBase.cs : its Open() is WaitForChannel().

2006-02-08  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs : call Flush() after serializing message
	  into HTTP stream.

2006-02-08  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs : implemented pretty hacky Request().

2006-02-02  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs : Manager is HttpChannelFactory.

2006-02-01  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelFactoryBase.cs : removed some NotImplementedException for
	  further internal implementation.

2006-01-26  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestChannel.cs : new file. mostly not implemented.
	* HttpChannelFactory.cs : Implemented CanCreateChannel().
	  Partly implemented CreateChannel().

2006-01-26  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpChannelFactory.cs : (.ctor())
	  Don't take ChannelBuildContext.

2005-11-21  Atsushi Enomoto  <atsushi@ximian.com>

	* StreamSecurityUpgradeInitiator.cs PeerMessageOrigination.cs
	  ChannelBase.cs StreamSecurityUpgradeAcceptor.cs
	  PeerMessagePropagation.cs : updated to Nov. CTP.

2005-11-21  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelListenerBase.cs, ChannelManagerBase.cs,
	  ChannelListenerBase_1.cs, LayeredChannelListener.cs,
	  StreamSecurityUpgradeAcceptor.cs,
	  StreamSecurityUpgradeInitiator.cs :
	  Updated to Nov. CTP API.

2005-11-21  Atsushi Enomoto  <atsushi@ximian.com>

	Now we can rename ListenerFactoryBase.cs to ChannelListenerBase.cs.

2005-11-21  Atsushi Enomoto  <atsushi@ximian.com>

	renamed ChannelListenerBase.cs to ChannelListenerBase_1.cs.

2005-11-21  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelBase.cs : tiny filename fix.
	* ChannelListenerBase.cs : added more .ctor()s.

2005-11-21  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpListenerFactory.cs LayeredChannelListener.cs HttpListener.cs
	  ListenerFactoryBase.cs ChannelListenerBase.cs :
	  updated IListener related stuff to Nov. CTP.
	  file renaming will come soon.

2005-11-21  Atsushi Enomoto  <atsushi@ximian.com>

	* ListenerBase.cs, ChannelListenerBase.cs :
	  moved from former to latter.
	* LayeredListenerFactory.cs, LayeredChannelListener.cs :
	  moved from former to latter.

2005-11-20  Atsushi Enomoto  <atsushi@ximian.com>

	* SessionFaultedException.cs : removed in Nov. CTP

2005-11-20  Atsushi Enomoto  <atsushi@ximian.com>

	* CommunicationObject.cs : updated to Nov. CTP.
	* SessionFaultedException.cs : removed (in Nov. CTP)

2005-11-03  Atsushi Enomoto  <atsushi@ximian.com>

	* TextMessageEncoder.cs : kinda implemented (untested; Message is not
	  working).

2005-11-03  Atsushi Enomoto  <atsushi@ximian.com>

	* MtomMessageEncoder.cs, BinaryMessageEncoderFactory.cs,
	  TextMessageEncoderFactory.cs, BinaryMessageEncoder.cs,
	  TextMessageEncoder.cs, MtomMessageEncoderFactory.cs : new files.
	* MessageEncoder.cs : largely implemented.

2005-11-02  Atsushi Enomoto  <atsushi@ximian.com>

	* IRequestReplyCorrelator.cs : new file.

2005-11-02  Atsushi Enomoto  <atsushi@ximian.com>

	* CommunicationObject.cs : OnClose() and OnError() are not virtual.
	* DirectionalAction.cs : implemented IComparable<DirectionalAction>.
	* MessageEncoder.cs : added misssing ToString().

2005-11-02  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelBehaviorCollection.cs : moved to sys.sm.

2005-10-28  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpListenerFactory.cs, HttpListener.cs : new files.
	* ListenerFactoryBase.cs, ChannelManagerBase.cs,
	  CommunicationObject.cs, ChannelFactoryBase.cs,
	  StreamUpgradeProvider.cs, ChannelBase.cs : timeouts are now
	  protected internal.
	* CommunicationObject.cs : Aborted is bool. Added InternalClose()
	* ListenerFactoryBase.cs : kinda implemented GetListeners().

2005-10-26  Atsushi Enomoto  <atsushi@ximian.com>

	* ListenerFactoryBase.cs : some implementation.

2005-10-26  Atsushi Enomoto  <atsushi@ximian.com>

	* CommunicationObject.cs : more state fixes.

2005-10-26  Atsushi Enomoto  <atsushi@ximian.com>

	* CommunicationObject.cs : some state machine fixes.

2005-10-26  Atsushi Enomoto  <atsushi@ximian.com>

	* PeerNode.cs, ChannelManagerBase.cs :
	  several API fixes detected by improved corcompare.

2005-10-25  Atsushi Enomoto  <atsushi@ximian.com>

	* LayeredListenerFactory.cs : added missing generic class constraint.

2005-10-25  Atsushi Enomoto  <atsushi@ximian.com>

	* ListenerFactoryBase.cs,
	  ListenerBase.cs : class constraints were missing for generic args.

2005-10-24  Atsushi Enomoto  <atsushi@ximian.com>

	* StreamUpgradeInitiator.cs : tiny API fix.

2005-10-23  Atsushi Enomoto  <atsushi@ximian.com>

	* PeerMessagePropagationFilter.cs : tiny build fix.

2005-10-23  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpRequestMessageProperty.cs, HttpResponseMessageProperty.cs :
	  added Name. fixed StatusCode type.
	* StreamSecurityUpgradeInitiator.cs, StreamUpgradeAcceptor.cs,
	  PeerNode.cs, StreamSecurityUpgradeAcceptor.cs,
	  StreamUpgradeProvider.cs, StreamUpgradeInitiator.cs,
	  DirectionalAction.cs, HostedTransportConfiguration.cs,
	  StreamSecurityUpgradeProvider.cs, SessionFaultedException.cs,
	  PeerMessagePropagationFilter.cs : added missing files.
	* Dummy.cs : removed. MSMQ stuff can be added later.

2005-10-21  Atsushi Enomoto  <atsushi@ximian.com>

	* DeliveryStatus.cs, DeliveryFailure.cs,
	  HttpRequestMessageProperty.cs, PeerMessageOrigination.cs,
	  PeerMessagePropagation.cs, HttpResponseMessageProperty.cs :
	  new files.
	* Dummy.cs : removed above.

2005-10-18  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelFactoryBase.cs : tiny .ctor() delegation fix.

2005-10-09  Atsushi Enomoto  <atsushi@ximian.com>

	* MessageEncoderFactory.cs, LayeredListenerFactory.cs,
	  MessageEncoder.cs, BufferManager.cs : new files.
	* Dummy.cs : removed above.

2005-10-09  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelBase.cs, ChannelBehaviorCollection.cs : new channel files.
	* Dummy.cs : removed above.
	* CommunicationObject.cs, ListenerFactoryBase.cs : added missing bits.

2005-10-09  Atsushi Enomoto  <atsushi@ximian.com>

	* HttpChannelFactory.cs : new file.

2005-10-08  Atsushi Enomoto  <atsushi@ximian.com>

	* IReplyChannel.cs, IRequestContext.cs, IRequestChannel.cs:
	  moved to ../System.ServiceModel (correct location).
	* ChannelFactoryBase.cs, LayeredChannelFactory.cs, TransferMode.cs:
	  new files for channels.
	* Dummy.cs : reflected above changes.
	* ChannelManagerBase.cs : added a bit of code and todos.

2005-10-04  Atsushi Enomoto  <atsushi@ximian.com>

	* ChannelManagerBase.cs, ListenerBase.cs, ListenerFactoryBase.cs :
	  added listener support files.
	* Dummy.cs : removed above.

2005-10-03  Atsushi Enomoto  <atsushi@ximian.com>

	* IReplyChannel.cs, IRequestContext.cs, IRequestChannel.cs :
	  added request/reply channel interfaces.
	* Dummy.cs : removed above.
	* CommunicationObject.cs : FIXME comments.

2005-10-03  Atsushi Enomoto  <atsushi@ximian.com>

	* CommunicationObject.cs : implemented some members.

2005-09-29  Atsushi Enomoto  <atsushi@ximian.com>

	* CommunicationObject.cs : some signature fixes.

